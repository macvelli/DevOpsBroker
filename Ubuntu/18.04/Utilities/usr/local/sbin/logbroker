#!/bin/bash

#
# logbroker - DevOpsBroker administrative tool for managing log files
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.5 LTS running kernel.osrelease = 4.15.0-34
#
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
	source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;91mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
	source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"[1;91mCannot load '/etc/devops/exec.conf': No such file[0m"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
	source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"[1;91mCannot load '/etc/devops/functions.conf': No such file[0m"}

# Display error if not running as root
if [ "$USER" != 'root' ]; then
	printError 'logbroker' 'Permission denied (you must be root)'
	exit 1
fi

################################## Functions ##################################

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     getVarLogDirectory
# Description:  Returns the name of the archive directory for the log name
# -----------------------------------------------------------------------------
function getVarLogDirectory() {

	# Create /var/log/logbroker/$logName directory if necessary
	if [ ! -d /var/log/"$logName" ]; then
		$EXEC_MKDIR --parents --mode=750 "/var/log/logbroker/$logName"
	fi

	echo "/var/log/logbroker/$logName"

}

################################## Variables ##################################

## Bash exec variables
EXEC_DMESG=/bin/dmesg
EXEC_GZIP=/bin/gzip

## Options
command="$1"
logName="$2"

## Variables
validCommands=('clear' 'reset' 'save')
validLogs=('dmesg')

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display usage if no parameters given
if [ -z "$command" ]; then
	printUsage 'logbroker { clear | reset | save }'
	exit 1
fi

# Display error if invalid command
if [ $(containsElement "$command" "${validCommands[@]}") != '0' ]; then
	printError 'logbroker' "Invalid command: '$command'"
	echo
	printUsage 'logbroker { clear | reset | save }'

	exit 1
fi

# Display usage if missing log name parameter
if [ -z "$logName" ]; then
	printUsage "logbroker $command { dmesg }"
	exit 1
fi

# Display error if invalid log name
if [ $(containsElement "$logName" "${validLogs[@]}") != '0' ]; then
	printError 'logbroker' "Invalid log name: '$logName'"
	echo
	printUsage "logbroker $command { dmesg }"

	exit 1
fi

################################### Actions ###################################

# Create /var/log/logbroker directory if necessary
if [ ! -d /var/log/logbroker ]; then
	$EXEC_MKDIR --parents --mode=2750 /var/log/logbroker
	$EXEC_CHOWN --changes root:adm /var/log/logbroker
fi

if [ "$logName" == 'dmesg' ]; then

	if [ "$command" == 'save' ] || [ "$command" == 'reset' ]; then
		logFilename="$(getVarLogDirectory)/$($EXEC_DATE '+%Y-%m-%d')-dmesg.log.gz"

		printInfo "Saving '$logName' log to '$logFilename'"
		$EXEC_DMESG | $EXEC_GZIP > "$logFilename"
		$EXEC_CHMOD --changes 640 "$logFilename"
	fi

	if [ "$command" == 'clear' ] || [ "$command" == 'reset' ]; then
		printInfo "Clearing '$logName' log"
		$EXEC_DMESG -C
	fi

fi

exit 0

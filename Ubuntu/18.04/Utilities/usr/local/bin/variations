#!/bin/bash

#
# variations - DevOpsBroker utility for generating variations of an RGB color
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.5 LTS running kernel.osrelease = 4.15.0-34
#
# Note: The # symbol needs to be escaped on the command line, if present, as
#	Bash interprets it as the beginning of a comment otherwise.
#
# Parameters:
#   $1: Hex color code
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
	source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;91mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
	source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"[1;91mCannot load '/etc/devops/exec.conf': No such file[0m"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
	source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"[1;91mCannot load '/etc/devops/functions.conf': No such file[0m"}

################################## Functions ##################################

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     addVariation
# Description:  Adds an RGB variation to the variation list
#
# Parameter $1: The red color value
# Parameter $2: The green color value
# Parameter $3: The blue color value
# -----------------------------------------------------------------------------
function addVariation() {
	# BEGIN addVariation function

	local red="$1"
	local green="$2"
	local blue="$3"

	# Calculate shade Hex color code
	hexCode=$( printf "%02x" $red )
	hexCode=$hexCode$( printf "%02x" $green )
	hexCode=$hexCode$( printf "%02x" $blue )

	variationList+=("#${hexCode^^}")
	rgbList+=("[48;2;$red;$green;${blue}m")

	# END addVariation function
}

################################## Variables ##################################

## Options
hexCode="$1"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display usage if no parameters given
if [ -z "$hexCode" ]; then
	printUsage 'variations HEX_CODE'
	exit 1
fi

# Display error if parameter is not a valid hex color code
if [[ ! "$hexCode" =~ ^\#?[a-fA-F0-9]{6}$ ]]; then
	printError 'variations' "Invalid hex color code: $hexCode"
	echo
	printUsage 'variations HEX_CODE'

	exit 1
fi

# Remove hash character, if present
if [ ${#hexCode} -eq 7 ]; then
	hexCode="${hexCode:1}"
fi

################################### Actions ###################################

# Create the variation list
variationList=()

# Calcualte the RGB color code from the Hex color code
red=$((16#${hexCode:0:2}))
green=$((16#${hexCode:2:2}))
blue=$((16#${hexCode:4:2}))

addVariation $red $green $blue
addVariation $red $blue $green
addVariation $green $red $blue
addVariation $green $blue $red
addVariation $blue $red $green
addVariation $blue $green $red

echo
echo "   RGB       RBG       GRB       GBR       BRG       BGR"

echo -n ${black}
for x in 0 1 2 3 4 5; do
	if [ $x -gt 0 ]; then
		echo -n ${reset}' '${black}
	fi

	echo -n ${rgbList[$x]}" ${variationList[$x]} "
done

echo ${reset}
echo





exit 0

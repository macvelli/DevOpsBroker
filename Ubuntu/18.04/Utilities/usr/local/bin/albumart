#!/bin/bash

#
# albumart - DevOpsBroker script for generating standardized album art JPEG images
#
# Copyright (C) 2019 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 18.04.2 LTS running kernel.osrelease = 4.18.0-17
#
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
	source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;91mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
	source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"[1;91mCannot load '/etc/devops/exec.conf': No such file[0m"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
	source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"[1;91mCannot load '/etc/devops/functions.conf': No such file[0m"}

# Load /etc/devops/functions-io.conf if FUNC_IO_CONFIG is unset
if [ -z "$FUNC_IO_CONFIG" ] && [ -f /etc/devops/functions-io.conf ]; then
	source /etc/devops/functions-io.conf
fi

${FUNC_IO_CONFIG?"[1;91mCannot load '/etc/devops/functions-io.conf': No such file[0m"}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Robustness ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

set -o errexit                 # Exit if any statement returns a non-true value
set -o nounset                 # Exit if use an uninitialised variable
set -o pipefail                # Exit if any statement in a pipeline returns a non-true value
IFS=$'\n\t'                    # Default the Internal Field Separator to newline and tab

scriptName='albumart'

################################## Functions ##################################

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     generateAlbumArt
# Description:  Converts the JPEG to the specified album art dimension
#
# Parameter $1: The size of the album art to generate
# -----------------------------------------------------------------------------
function generateAlbumArt() {

	if [ $jpegWidth -ge $1 ]; then
		printInfo "Converting $jpegFile to $1x$1"

		$EXEC_CONVERT "$jpegFile" -resize $1x$1 -quality 90 -strip "$TMPDIR/$jpegFile"
	else
		printInfo "Converting $jpegFile"

		$EXEC_CONVERT "$jpegFile" -quality 90 -strip "$TMPDIR/$jpegFile"
	fi

	$EXEC_MV "$TMPDIR/$jpegFile" "$jpegFile"
}

################################## Variables ##################################

## Bash exec variables
EXEC_CONVERT=/usr/bin/convert
EXEC_IDENTIFY=/usr/bin/identify

## Options
jpegFile="${1:-}"

## Variables
export TMPDIR=${TMPDIR:-'/tmp'}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display usage if no parameters given
if [ -z "$jpegFile" ]; then
	printUsage "$scriptName IMG_FILE"
	exit 1
fi

errorMessage=$(isValidFile $scriptName "$jpegFile")

# Display error if file parameter is missing or invalid
if [ "$errorMessage" != '0' ]; then
	echo "$errorMessage"
	echo
	printUsage "$scriptName IMG_FILE"

	exit 1
fi

unset IFS; fileIdArray=( $($EXEC_IDENTIFY "$jpegFile") ); IFS=$'\n\t'
fileIdArrayLen=${#fileIdArray[@]}

# Display error if file is invalid
if [ $fileIdArrayLen -eq 0 ] || [ "${fileIdArray[1]}" != 'JPEG' ]; then
	printError $scriptName "Invalid JPEG file: $jpegFile"
	echo
	printUsage "$scriptName IMG_FILE"

	exit 1
fi

IFS='x'; dimensionInfo=(${fileIdArray[2]}); IFS=$'\n\t';
jpegWidth=${dimensionInfo[0]}
jpegHeight=${dimensionInfo[1]}

# Display error if dimensions are invalid
if [ $jpegWidth -ne $jpegHeight ]; then
	printError $scriptName "Invalid JPEG dimensions: ${fileIdArray[2]}"
	echo
	printUsage "$scriptName IMG_FILE"

	exit 1
fi

################################### Actions ###################################

printBanner 'Generating album art'

# Generate album art
generateAlbumArt 800

echo

exit 0

#
# functions.conf - DevOpsBroker Bash configuration for script functions
#
# Copyright (C) 2018-2019 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <https://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# The following functions have been defined within this configuration file:
#   o containsElement(element, array)
#   o detectVirtualization()
#   o getKernelVersion()
#   o getRamTotal()
#   o getUbuntuRelease()
#   o isValidUsername(scriptName, username)
#   o max(a, b)
#   o min(a, b)
#   o printBanner(message)
#   o printBox(message, double-line)
#   o printError(scriptName, errorMsg)
#   o printInfo(message)
#   o printNotice(scriptName, message)
#   o printUsage(usageInfo)
# -----------------------------------------------------------------------------
#

############################ Environment Variables ############################

# Export all of the following variables
set -a

# Indicates this configuration file has already been loaded
FUNC_CONFIG=true

## Variables
UBUNTU_RELEASE="Ubuntu 18.04 Desktop"

# Export variables complete
set +a

################################## Functions ##################################

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     containsElement
# Description:  Returns 0 if the element is contained within the array, 1 otherwise
#
# Parameter $1: The element to search for
# Parameter $2: The array to search
# -----------------------------------------------------------------------------
function containsElement() {
	local element="$1"
	shift
	local array=("$@")

	for str in "${array[@]}"; do
		if [ "$str" == "$element" ]; then
			echo "0"
			return 0
		fi
	done

	echo "1"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     detectVirtualization
# Description:  Detect whether Ubuntu Server is running as a virtual machine guest
# -----------------------------------------------------------------------------
function detectVirtualization() {
	local journalEntry="$(/bin/journalctl --dmesg | $EXEC_GREP -F --max-count=1 'Detected virtualization' || true)"

	if [ "$journalEntry" ]; then
		IS_VM_GUEST=1

		if [[ "$journalEntry" =~ (Detected virtualization kvm) ]]; then
			IS_KVM=1
		fi
	fi
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     getKernelVersion
# Description:  Returns the Linux kernel version (i.e. 4.13.0-45)
# -----------------------------------------------------------------------------
function getKernelVersion() {
	local kernelInfo=$(/bin/cat /proc/sys/kernel/osrelease)

	echo "${kernelInfo%'-generic'}"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     getRamTotal
# Description:  Returns the total amount of memory in the system (in kB)
# -----------------------------------------------------------------------------
function getRamTotal() {
	echo "$(/usr/bin/awk '/^MemTotal/ { print $2; exit }' /proc/meminfo)"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     getUbuntuRelease
# Description:  Returns the distribution information (e.g. Ubuntu 18.04.1 LTS)
# -----------------------------------------------------------------------------
function getUbuntuRelease() {
	echo "$(/usr/bin/lsb_release -sd)"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     isValidUsername
# Description:  Verifies whether the parameter is not empty and is a valid username
#
# Parameter $1: The name of the script
# Parameter $2: The username parameter
# Returns:      Zero if username is valid, one if invalid
# -----------------------------------------------------------------------------
function isValidUsername() {
	# Display error if no username parameter given
	if [ -z "$2" ]; then
		printError "$1" 'Missing username parameter'
		return 1
	fi

	# Display error if invalid username parameter given
	if [ -z "$(/usr/bin/getent passwd $2)" ]; then
		printError "$1" "Cannot find '$2': No such user"
		return 1
	fi

	echo '0'
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     max
# Description:  Returns the maximum value between two numbers
#
# Parameter $1: Number A
# Parameter $2: Number B
# Returns:      The maximum value between A and B
# -----------------------------------------------------------------------------
function max() {
	if [ "$1" -gt "$2" ]; then
		echo $1;
	else
		echo $2;
	fi
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     min
# Description:  Returns the minimum value between two numbers
#
# Parameter $1: Number A
# Parameter $2: Number B
# Returns:      The minimum value between A and B
# -----------------------------------------------------------------------------
function min() {
  if [ "$1" -lt "$2" ]; then
    echo $1;
  else
    echo $2;
  fi
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     printBanner
# Description:  Prints a banner with the message passed in the first parameter
#
# Parameter $1: The message to print in the banner
# -----------------------------------------------------------------------------
function printBanner() {
	local msgLen=$[ ${#1} + 3 ]

	echo ${reset}
	echo "${bold}$1..."

	for (( i=0; i < $msgLen; i++ )); do
		echo -n "¯"
	done

	echo ${reset}
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     printBox
# Description:  Displays a box containing the given message
#
# Parameter $1: The message to print within the box
# Parameter $2: Set to 'true' to print a double-line box (optional)
# -----------------------------------------------------------------------------
function printBox() {
	local msgLength=${#1}
	local lineCharList
	local msgLine=''

	if [ "${2:-}" == 'true' ]; then
		lineCharList=('╔═' '═' '═╗' '║' '╚═' '═╝')
	else
		lineCharList=('┌─' '─' '─┐' '│' '└─' '─┘')
	fi

	for (( i=0; i < $msgLength; i++ )); do
		msgLine="$msgLine${lineCharList[1]}"
	done

	echo ${bold} ${purple}
	echo "${lineCharList[0]}$msgLine${lineCharList[2]}"
	echo "${lineCharList[3]} ${white}$1${purple} ${lineCharList[3]}"
	echo "${lineCharList[4]}$msgLine${lineCharList[5]}"
	echo ${reset}
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     printError
# Description:  Prints error message for the given script
#
# Parameter $1: The name of the script with the error
# Parameter $2: The error message to print
# -----------------------------------------------------------------------------
function printError() {
	echo "${bold}$1: ${red}$2${reset}"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     printInfo
# Description:  Prints the information passed into the function
#
# Parameter $1: The information to print
# -----------------------------------------------------------------------------
function printInfo() {
	>&2 echo "${bold}${aqua}o $1...${reset}"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     printNotice
# Description:  Prints a notice on the command-line to the end user
#
# Parameters:
#   $1      The name of the script
#   $2      The notice message to print
# -----------------------------------------------------------------------------
function printNotice() {
	echo "${bold}$1: ${orange}$2${reset}"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:     printUsage
# Description:  Prints usage information message
#
# Parameter $1: The usage information to print
# -----------------------------------------------------------------------------
function printUsage() {
	if [ "$1" != "false" ]; then
		echo "${bold}Usage: ${yellow}$1${reset}"
	else
		echo "${bold}       ${yellow}$2${reset}"
	fi
}

## Export functions to shell
export -f containsElement
export -f detectVirtualization
export -f getKernelVersion
export -f getRamTotal
export -f getUbuntuRelease
export -f isValidUsername
export -f max
export -f min
export -f printBanner
export -f printBox
export -f printError
export -f printInfo
export -f printNotice
export -f printUsage

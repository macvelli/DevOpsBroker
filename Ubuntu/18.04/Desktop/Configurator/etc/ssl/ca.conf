#
# ca.conf - DevOpsBroker configuration for a local Certificate Authority
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.5 LTS running kernel.osrelease = 4.15.0-33
#
# Defaults for signing Certificate Signing Requests with the 'openssl ca'
# command.
# -----------------------------------------------------------------------------
#

HOME              = .
RANDFILE          = $ENV::HOME/.rnd

###############################################################################

[ ca ]
default_ca	= Local_CA

[ Local_CA ]
dir               = /opt/ca               # Root directory of the CA
certs		      = $dir/certsdb          # Where the issued certs are kept
new_certs_dir	  = $certs                # Default location for new certificates
database          = $dir/index.txt        # Signed certificates database

certificate       = $dir/ca.crt           # The CA certificate
private_key       = $dir/private/ca.key   # The CA private key
serial            = $dir/serial           # The current CA serial number
crl               = $dir/crl.pem          # The current CRL
crlnumber         = $dir/crlnumber        # The current CRL number

RANDFILE          = $dir/private/.rand    # Private random number file

# By default we use "user certificate" X.509 extensions when signing certificates
x509_extensions   = usr_cert

# Honor extensions requested of us (i.e. subjectAltName)
copy_extensions   = copy

name_opt          = ca_default            # Subject Name options
cert_opt          = ca_default            # Certificate field options

default_days      = 365                   # The number of days to make a certificate valid
default_crl_days  = 30                    # How long before the next CRL
default_md        = default               # Use public key default message digest
preserve          = yes                   # Keep passed DN ordering

policy            = policy_match          # Default policy section to use if none is specified

#
# match     - The CSR field value must match the same field in the CA certificate
# supplied  - The CSR field value must be present
# optional  - The CSR field value may be present
#
# Any fields not explicitly mentioned are silently deleted
#

[ policy_match ]
countryName             = match
stateOrProvinceName     = supplied
localityName            = optional
organizationName        = supplied
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_anything ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

#
# X.509 "user certificate" extensions to add to the cert when 'ca' signs a request
#   o Default x509_extensions value
#   o The certificate cannot be used as a CA
#   o SKI: Identify certificates that contain a particular public key with an SHA-1 hash
#   o AKI: Identify the public key corresponding to the private key used to sign a CRL
#

[ usr_cert ]
basicConstraints        = CA:FALSE
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid,issuer
crlDistributionPoints   = URI:http://www.example.org/example_org_ca.crl

#
# X.509 extensions to use when signing a CA
#   o Alternative x509_extensions value specified using '-extensions ca_cert' command line option
#   o The certificate can be used as a CA
#   o SKI: Identify certificates that contain a particular public key with an SHA-1 hash
#   o AKI: Identify the public key corresponding to the private key used to sign a CRL
#

[ ca_cert ]
basicConstraints        = CA:TRUE
subjectKeyIdentifier    = hash
authorityKeyIdentifier  = keyid:always,issuer
crlDistributionPoints   = URI:http://www.example.org/example_org_ca.crl

###############################################################################

[ req ]
default_bits        = 2048
default_md          = sha256
encrypt_key         = no
string_mask         = utf8only
req_extensions      = v3_req_ca

distinguished_name  = req_distinguished_name
attributes          = req_attributes

[ req_distinguished_name ]
countryName                  = Country Name (2 letter code)
countryName_default          = US
countryName_min              = 2
countryName_max              = 2

stateOrProvinceName          = State or Province Name (full name)
stateOrProvinceName_default  = Texas

localityName                 = Locality Name (eg, city)
localityName_default         = Dallas

0.organizationName           = Organization Name (eg, company)
0.organizationName_default   = LocalCertificateAuthority.org

organizationalUnitName       = Organizational Unit Name (eg, section)

commonName                   = Common Name (e.g. YOUR name)
commonName_max               = 64

emailAddress                 = Email Address
emailAddress_max             = 96

[ req_attributes ]
#challengePassword            = A challenge password
#challengePassword_min        = 4
#challengePassword_max        = 20
#unstructuredName             = An optional company name

#
# Extensions to add to a PKCS#10 certificate request
#   o The certificate can be used as a CA (default)
#   o Always put email addresses in X509v3 Subject Alternative Name instead of the DN
#

[ v3_req_ca ]
basicConstraints  = critical,CA:TRUE,pathlen:1
keyUsage          = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
extendedKeyUsage  = serverAuth, clientAuth, codeSigning, emailProtection, timeStamping
subjectAltName    = email:move

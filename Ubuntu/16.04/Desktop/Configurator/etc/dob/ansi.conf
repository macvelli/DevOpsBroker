#
# ansi.conf - DevOpsBroker configuration for ANSI escape sequences including
#	      Terminal colors and cursor movement
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# The following functions manipulate colors within a Terminal window:
#   o bold
#   o reset
#   o bittersweet
#   o kobi
#   o melon
#   o padua
#   o putty
#   o white
#   o yellow
#   o rgb
#
# The following functions control cursor movement within a Terminal window:
#   o clearScreen
#   o eraseToEOL
#   o moveCursorUp
#   o moveCursorDown
#   o moveCursorFwd
#   o moveCursorBack
#   o positionCursor
#   o saveCursorPos
#   o restoreCursorPos
#
# -----------------------------------------------------------------------------
#


############################ Environment Variables ############################

## Control Sequence Introducer (CSI)
export csi="\033["

## Select Graphic Rendition (SGR) parameters
export fg24="38;2;"
export fg256="38;5;"

################################## Functions ##################################

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ANSI Colors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## ANSI Select Graphic Rendition (SGR) control functions
function bold() {
  if [ -z "$1" ]; then
    echo -n $csi"1m"
  else
    echo -n $csi"1m"
    eval ${1}
  fi
}

function reset() {
  echo -n $csi"0m"
}

function bittersweet() {
  echo -n $csi$fg256"203m"
}

function darkOrange() {
  echo -n $csi$fg256"208m"
}

function kobi() {
  echo -n $csi$fg24"215;146;177m"
}

function melon() {
  echo -n $csi$fg24"254;186;173m"
}

function padua() {
  echo -n $csi$fg24"127;186;147m"
}

function putty() {
  echo -n $csi$fg24"215;165;113m"
}

function white() {
  echo -n $csi$fg256"231m"
}

function yellow() {
  echo -n $csi$fg256"226m"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	rgb
# Description:	Changes the terminal color to the RGB color code
#
# Parameter $1:	Red color code
# Parameter $2:	Green color code
# Parameter $3:	Blue color code
# -----------------------------------------------------------------------------
function rgb() {
  # BEGIN rgb function

  # Display usage if no parameters given
  if [ -z "$1" ] || [ -z "$2" ] || [ -z "$3" ]; then
    printUsage "rgb RED GREEN BLUE"

    return 1
  fi

  # Display error if parameter is not a valid RGB color
  if [[ ! "$1" =~ ^[0-9]{1,3}$ ]] || [ "$1" -gt 255 ] || \
	[[ ! "$2" =~ ^[0-9]{1,3}$ ]] || [ "$2" -gt 255 ] || \
	[[ ! "$3" =~ ^[0-9]{1,3}$ ]] || [ "$3" -gt 255 ]; then
    printError "rgb" "Invalid RGB color $1 $2 $3"

    return 1
  fi

  echo -n $csi$fg24"$1;$2;$3m"

  # END rgb function
}


## Export functions to shell
export -f bold
export -f reset
export -f bittersweet
export -f kobi
export -f melon
export -f padua
export -f putty
export -f white
export -f yellow
export -f rgb


# ~~~~~~~~~~~~~~~~~~~~~~~~~~ ANSI Cursor Movement ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	clearScreen
# Description:	Clears the screen and moves the cursor to (0,0)
# -----------------------------------------------------------------------------
function clearScreen() {
  echo -n $csi"2J"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	eraseToEOL
# Description:	Erase to end of line
# -----------------------------------------------------------------------------
function eraseToEOL() {
  echo -n $csi"K"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	moveCursorUp
# Description:	Moves the cursor up $1 lines
#
# Parameter $1:	The number of lines to move up
# -----------------------------------------------------------------------------
function moveCursorUp() {
  echo -n $csi"$1A"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	moveCursorDown
# Description:	Moves the cursor down $1 lines
#
# Parameter $1:	The number of lines to move down
# -----------------------------------------------------------------------------
function moveCursorDown() {
  echo -n $csi"$1B"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	moveCursorFwd
# Description:	Moves the cursor forward $1 columns
#
# Parameter $1:	The number of columns to move forward
# -----------------------------------------------------------------------------
function moveCursorFwd() {
  echo -n $csi"$1C"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	moveCursorBack
# Description:	Moves the cursor backward $1 columns
#
# Parameter $1:	The number of columns to move backward
# -----------------------------------------------------------------------------
function moveCursorBack() {
  echo -n $csi"$1D"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	positionCursor
# Description:	Puts the cursor at line $1 and column $2
#
# Parameter $1:	The line number
# Parameter $2:	The column number
# -----------------------------------------------------------------------------
function positionCursor() {
  echo -n $csi"$1;$2H"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	saveCursorPos
# Description:	Saves the cursor position
# -----------------------------------------------------------------------------
function saveCursorPos() {
  echo -n $csi"s"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	restoreCursorPos
# Description:	Restores the cursor position
# -----------------------------------------------------------------------------
function restoreCursorPos() {
  echo -n $csi"u"
}


## Export functions to shell
export -f clearScreen
export -f eraseToEOL
export -f moveCursorUp
export -f moveCursorDown
export -f moveCursorFwd
export -f moveCursorBack
export -f positionCursor
export -f saveCursorPos
export -f restoreCursorPos


#
# functions.conf - DevOpsBroker Bash configuration for script functions
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# The following functions have been defined within this configuration file:
#   o containsElement(element, array)
#   o installConfig(configFile, sourceDir, destDir, serviceName)
#   o isExecutable(fileName)
#   o printBanner(message)
#   o printError(scriptName, errorMsg)
#   o printInfo(message)
#   o printUsage(usageInfo)
#
# -----------------------------------------------------------------------------
#


################################## Functions ##################################

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	containsElement
# Description:	Returns 0 if the element is contained within the array, 1
#		otherwise
#
# Parameter $1: The element to search for
# Parameter $2: The array to search
# -----------------------------------------------------------------------------
function containsElement() {
  local element="$1"
  shift
  local array=("$@")

  for str in "${array[@]}"; do

    if [ "$str" == "$element" ]; then
      echo "0"

      return 0
    fi

  done

  echo "1"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	installConfig
# Description:	Installs the configuration file from the source directory into
#		the destination directory
#
# Parameter $1:	Name of the configuration file to install
# Parameter $2:	The source directory
# Parameter $3:	The destination directory
# Parameter $4: The name of the service to restart (optional)
# -----------------------------------------------------------------------------
function installConfig() {
  # BEGIN install config function

  local configFile="$1"
  local sourceDir="$2"
  local destDir="$3"
  local serviceName="$4"

  if [ ! -f "$destDir/$configFile" ]; then

    printInfo "Installing $destDir/$configFile"

    # Install as root:root with rw-r--r-- privileges
    install -o root -g root -m 644 "$sourceDir/$configFile" "$destDir"

    # Restart related service, if necessary
    if [ ! -z "$4" ]; then
      printInfo "Restart $4 Service"
      systemctl restart $4.service
    fi

    echo

  elif ! grep -Fq "DevOpsBroker" "$destDir/$configFile"; then

    printInfo "Installing $destDir/$configFile"

    # Install as root:root with rw-r--r-- privileges
    install -b --suffix .orig -o root -g root -m 644 "$sourceDir/$configFile" "$destDir"

    # Restart related service, if necessary
    if [ ! -z "$4" ]; then
      printInfo "Restart $4 Service"
      systemctl restart $4.service
    fi

    echo

  elif [ "$sourceDir/$configFile" -nt "$destDir/$configFile" ]; then
    printInfo "Updating $destDir/$configFile"

    # Install as root:root with rw-r--r-- privileges
    install -b --suffix .bak -o root -g root -m 644 "$sourceDir/$configFile" "$destDir"

    # Restart related service, if necessary
    if [ ! -z "$4" ]; then
      printInfo "Restart $4 Service"
      systemctl restart $4.service
    fi

    echo

  fi

  # END install config function
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	isExecutable
# Description:	Checks whether the file is executable; makes it executable for
#		the user if not
#
# Parameter $1:	The file to check if it is executable
# -----------------------------------------------------------------------------
function isExecutable() {
  if [ ! -x "$1" ]; then
    chmod u+x "$1"
  fi

  echo "$1"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	printBanner
# Description:	Prints a banner with the message passed in the first parameter
#
# Parameter $1:	The message to print in the banner
# -----------------------------------------------------------------------------
function printBanner() {
  let msgLen=${#1}+3

  echo -e "$(bold)$1..."

  for (( i=0; i < $msgLen; i++ )); do
    echo -n "¯"
  done

  echo -e $(reset)
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	printError
# Description:	Prints error message for the given script
#
# Parameter $1:	The name of the script with the error
# Parameter $2:	The error message to print
# -----------------------------------------------------------------------------
function printError() {
  echo -e "$(bold)$1: $(bittersweet)$2$(reset)"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	printInfo
# Description:	Prints the information passed into the function
#
# Parameter $1:	The information to print
# -----------------------------------------------------------------------------
function printInfo() {
  echo -e "$(melon)o $1...$(reset)"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	printUsage
# Description:	Prints usage information message
#
# Parameter $1:	The usage information to print
# -----------------------------------------------------------------------------
function printUsage() {
  if [ "$1" != "false" ]; then
    echo -e "$(bold)Usage:$(yellow) $1$(reset)"
  else
    echo -e "$(bold)      $(yellow) $2$(reset)"
  fi
}


## Export functions to shell
export -f containsElement
export -f installConfig
export -f isExecutable
export -f printBanner
export -f printError
export -f printInfo
export -f printUsage


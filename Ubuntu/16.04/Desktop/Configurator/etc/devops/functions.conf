#
# functions.conf - DevOpsBroker Bash configuration for script functions
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <https://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# The following functions have been defined within this configuration file:
#   o containsElement(element, array)
#   o getKernelVersion()
#   o getRamTotal()
#   o getUbuntuRelease()
#   o installConfig(configFile, sourceDir, destDir, serviceName)
#   o isExecutable(fileName)
#   o isValidDirectory(scriptName, dirName)
#   o isValidFile(scriptName, fileName)
#   o isValidUsername(scriptName, username)
#   o printBanner(message)
#   o printError(scriptName, errorMsg)
#   o printInfo(message)
#   o printUsage(usageInfo)
# -----------------------------------------------------------------------------
#

############################ Environment Variables ############################

# Indicates this configuration file has already been loaded
FUNC_CONFIG=true

# Installation directory
INSTALL_DIR=/opt/devopsbroker/xenial/desktop/configurator

################################## Functions ##################################

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	containsElement
# Description:	Returns 0 if the element is contained within the array, 1
#		otherwise
#
# Parameter $1: The element to search for
# Parameter $2: The array to search
# -----------------------------------------------------------------------------
function containsElement() {
  local element="$1"
  shift
  local array=("$@")

  for str in "${array[@]}"; do

    if [ "$str" == "$element" ]; then
      echo "0"

      return 0
    fi

  done

  echo "1"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	getKernelVersion
# Description:	Returns the Linux kernel version (i.e. 4.13.0-45)
# -----------------------------------------------------------------------------
function getKernelVersion() {
  local kernelInfo=$(/bin/cat /proc/sys/kernel/osrelease)

  echo "${kernelInfo%'-generic'}"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	getRamTotal
# Description:	Returns the total amount of memory in the system (in kB)
# -----------------------------------------------------------------------------
function getRamTotal() {
  local memInfoArray=($(/bin/grep -F MemTotal /proc/meminfo))

  echo "${memInfoArray[1]}"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	getUbuntuRelease
# Description:	Returns the distribution information (e.g. Ubuntu 16.04.4 LTS)
# -----------------------------------------------------------------------------
function getUbuntuRelease() {
  local lsbInfo=$(/usr/bin/lsb_release -d)

  echo "${lsbInfo:13}"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	installConfig
# Description:	Installs the configuration file from the source directory into
#		the destination directory
#
# Parameter $1:	Name of the configuration file to install
# Parameter $2:	The source directory
# Parameter $3:	The destination directory
# Parameter $4: The name of the service to restart (optional)
# -----------------------------------------------------------------------------
function installConfig() {
  # BEGIN install config function

  local configFile="$1"
  local sourceDir="$2"
  local destDir="$3"
  local serviceName="$4"

  if [ ! -f "$destDir/$configFile" ]; then

    printInfo "Installing $destDir/$configFile"

    # Install as root:root with rw-r--r-- privileges
    /usr/bin/install -o root -g root -m 644 "$sourceDir/$configFile" "$destDir"

    # Restart related service, if necessary
    if [ ! -z "$4" ]; then
      printInfo "Restart $4 Service"
      /bin/systemctl restart $4.service
    fi

    echo

  elif ! grep -Fq "DevOpsBroker" "$destDir/$configFile"; then

    printInfo "Installing $destDir/$configFile"

    # Install as root:root with rw-r--r-- privileges
    /usr/bin/install -b --suffix .orig -o root -g root -m 644 "$sourceDir/$configFile" "$destDir"

    # Restart related service, if necessary
    if [ ! -z "$4" ]; then
      printInfo "Restart $4 Service"
      /bin/systemctl restart $4.service
    fi

    echo

  elif [ "$sourceDir/$configFile" -nt "$destDir/$configFile" ]; then
    printInfo "Updating $destDir/$configFile"

    # Install as root:root with rw-r--r-- privileges
    /usr/bin/install -b --suffix .bak -o root -g root -m 644 "$sourceDir/$configFile" "$destDir"

    # Restart related service, if necessary
    if [ ! -z "$4" ]; then
      printInfo "Restart $4 Service"
      /bin/systemctl restart $4.service
    fi

    echo

  fi

  # END install config function
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	isExecutable
# Description:	Checks whether the file is executable; makes it executable for
#		the user if not
#
# Parameter $1:	The file to check if it is executable
# -----------------------------------------------------------------------------
function isExecutable() {
  if [ ! -x "$1" ]; then
    /bin/chmod u+x "$1"
  fi

  echo "$1"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	isValidDirectory
# Description:	Verifies whether the directory parameter is not empty and is a
#		valid directory
#
# Parameter $1:	The name of the script
# Parameter $2: The command-line directory parameter
# Returns:	Zero if directory is valid, one if invalid
# -----------------------------------------------------------------------------
function isValidDirectory() {
  # BEGIN is valid directory function

  local scriptName="$1"
  shift

  # Display error if no directory parameter given
  if [ -z "$1" ]; then
    printError "$scriptName" 'Missing directory parameter'

    return 1
  fi

  local dirName="$@"

  # Display error if invalid directory parameter given
  if [ ! -d "$dirName" ]; then
    printError "$scriptName" "Cannot access '$dirName': No such directory"

    return 1
  fi

  echo '0'

  # END is valid directory function
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	isValidFile
# Description:	Verifies whether the file parameter is not empty and is a valid
#		file
#
# Parameter $1:	The name of the script
# Parameter $2: The file name to validate
# Returns:	Zero if file is valid, one if invalid
# -----------------------------------------------------------------------------
function isValidFile() {
  # BEGIN is valid file function

  local scriptName="$1"
  shift

  # Display error if no file parameter given
  if [ -z "$1" ]; then
    printError "$scriptName" 'Missing file parameter'

    return 1
  fi

  local fileName="$@"

  # Display error if invalid file parameter given
  if [ ! -f "$fileName" ]; then
    printError "$scriptName" "Cannot access '$fileName': No such file"

    return 1
  fi

  echo '0'

  # END is valid file function
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	isValidUsername
# Description:	Verifies whether the parameter is not empty and is a valid
#		username
#
# Parameter $1:	The name of the script
# Parameter $2: The username parameter
# Returns:	Zero if username is valid, one if invalid
# -----------------------------------------------------------------------------
function isValidUsername() {
  # BEGIN is valid username function

  # Display error if no username parameter given
  if [ -z "$2" ]; then
    printError "$1" 'Missing username parameter'

    return 1
  fi

  # Display error if invalid username parameter given
  if [ -z "$(/usr/bin/getent passwd $2)" ]; then
    printError "$1" "Cannot find '$2': No such user"

    return 1
  fi

  echo '0'

  # END is valid username function
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	printBanner
# Description:	Prints a banner with the message passed in the first parameter
#
# Parameter $1:	The message to print in the banner
# -----------------------------------------------------------------------------
function printBanner() {
  let msgLen=${#1}+3

  echo ${reset}
  echo "${bold}$1..."

  for (( i=0; i < $msgLen; i++ )); do
    echo -n "¯"
  done

  echo ${reset}
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	printError
# Description:	Prints error message for the given script
#
# Parameter $1:	The name of the script with the error
# Parameter $2:	The error message to print
# -----------------------------------------------------------------------------
function printError() {
  echo "${bold}$1: ${bittersweet}$2${reset}"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	printInfo
# Description:	Prints the information passed into the function
#
# Parameter $1:	The information to print
# -----------------------------------------------------------------------------
function printInfo() {
  echo "${bold}${rajah}o $1...${reset}"
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	printUsage
# Description:	Prints usage information message
#
# Parameter $1:	The usage information to print
# -----------------------------------------------------------------------------
function printUsage() {
  if [ "$1" != "false" ]; then
    echo "${bold}Usage: ${yellow}$1${reset}"
  else
    echo "${bold}       ${yellow}$2${reset}"
  fi
}


## Export functions to shell
export -f containsElement
export -f getKernelVersion
export -f getRamTotal
export -f getUbuntuRelease
export -f installConfig
export -f isExecutable
export -f isValidDirectory
export -f isValidFile
export -f isValidUsername
export -f printBanner
export -f printError
export -f printInfo
export -f printUsage

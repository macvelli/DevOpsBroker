#!/bin/bash

#
# venture - DevOpsBroker utility for managing software projects including
#	    project creation, compile, build, test, and deploy
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# TODO: new - Create new files (.s/.cpp/.whatever)
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
  source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;38;2;255;100;100mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
  source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"${bold}${bittersweet}Cannot load '/etc/devops/exec.conf': No such file${reset}"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
  source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"${bold}${bittersweet}Cannot load '/etc/devops/functions.conf': No such file${reset}"}

## Script information
SCRIPT_INFO=( $($EXEC_SCRIPTINFO "$BASH_SOURCE") )
SCRIPT_DIR="${SCRIPT_INFO[0]}"

################################## Functions ##################################

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:	createDirectory
# Description:	Creates a directory
#
# Parameter $1: The name of the directory to create within the base directory
# -----------------------------------------------------------------------------
function createDirectory() {

  if [ ! -d "$baseDir/$1" ]; then
    printInfo "Creating $baseDir/$1 directory"

    $EXEC_MKDIR "$baseDir/$1"
  fi

}

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:	showHelp
# Description:	Displays help message to the user
# -----------------------------------------------------------------------------
function showHelp() {
  # BEGIN showHelp function

  if [ -z "$command" ]; then
    printUsage "venture create ${gold}[-d directory] ${yellow}PROJECT_NAME"
    printUsage 'false' "venture new ${gold}[-d directory] ${yellow}FILENAME"

    echo ${bold}
    echo "Valid Commands:${romantic}"
    echo '  create	Create a brand new C project'
    echo '  new		Create a new file'
    echo ${reset}

  elif [ $command == 'create' ]; then
    printUsage "venture create ${gold}[-d directory] ${yellow}PROJECT_NAME"
    echo
  elif [ $command == 'new' ]; then
    printUsage "venture new ${gold}[-d directory] ${yellow}FILENAME"

    echo ${bold}
    echo "Valid File Types:${romantic}"
    echo -e '  source.c\t'	'C language source file'
    echo -e '  header.h\t'	'C language header file'
    echo -e '  script.sh\t'	'Bash shell script file'
    echo -e '  template.tpl\t'	'Bash shell template file'
    echo ${reset}
  fi

  echo -n ${bold}
  echo "Valid Options:${romantic}"
  echo -e '  -d directory\t'	'The target directory'
  echo ${reset}

  # END showHelp function
}


################################## Variables ##################################

validCommands=('create' 'new')
echoOnExit=false

## Options
command="$1"
baseDir='.'

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display help if no parameters given
if [ -z "$command" ]; then
  showHelp

  exit 1
fi

# Ensure the first parameter is a valid command
if [ $(containsElement "$command" "${validCommands[@]}") != '0' ]; then
  printError 'venture' "Invalid command: '$command'"
  echo

  showHelp

  exit 1
fi

# Process command-line options
while [[ "$2" == -* ]]; do

  # Base directory option
  if [ "$2" == '-d' ]; then

    errorMessage=$(isValidDirectory 'venture' "$3")

    # Display error if directory parameter is missing or invalid
    if [ "$errorMessage" != '0' ]; then
      showHelp

      exit 1
    fi

    # baseDir is the third command-line parameter
    baseDir="$3"
    shift 2

  else
    # Display error and help if option parameter is not valid
    printError 'venture' "Invalid option: '$2'"
    echo
    showHelp

    exit 1
  fi

done


################################### Actions ###################################

if [ "$1" == 'create' ]; then
  # BEGIN Create new project

  projectName="$2"
  baseDir="$baseDir/$projectName"

  # Display usage if no project name parameter given
  if [ -z "$projectName" ]; then
    showHelp

    exit 1
  fi

  printBanner "Creating new project $projectName"

  createDirectory 'bin'
  createDirectory 'doc'
  createDirectory 'lib'
  createDirectory 'res'
  createDirectory 'src'
  createDirectory 'test'

  if [ ! -f "$baseDir/makefile" ]; then
    # Create new makefile
    printInfo "Creating $baseDir/makefile"

    # Set makefile.tpl location and make it executable
    makefileTpl=$(isExecutable "$SCRIPT_DIR"/template/makefile.tpl)

    # Execute template script
    "$makefileTpl" "$projectName" > "$baseDir/makefile"

    echoOnExit=true
  fi

  # Create a new C source file
  sourceFile="${projectName,,}.c"
  baseDir="$baseDir/src"

  if [ ! -f "$baseDir/$sourceFile" ]; then
    # Create a new C source file
    printInfo "Creating $baseDir/$sourceFile"

    # Set source-file-c.tpl location and make it executable
    sourceFileCTpl=$(isExecutable "$SCRIPT_DIR"/template/source-file-c.tpl)

    # Execute template script
    "$sourceFileCTpl" "$sourceFile" > "$baseDir/$sourceFile"

    echoOnExit=true
  fi

  # END Create new project
elif [ "$1" == "new" ]; then
  # BEGIN Create new file

  fileName="$2"

  # Display usage if no file name parameter given
  if [ -z "$fileName" ] || [[ ! "$fileName" =~ ^.+\.(c|h|sh|tpl)$ ]]; then
    showHelp

    exit 1
  fi

  # Create a new C source file
  if [[ "$fileName" == *.c ]]; then

    # Put the new source file in the "$baseDir/src" subdirectory, if present
    if [ -d "$baseDir/src" ]; then
      baseDir="$baseDir/src"
    fi

    fileName="${fileName,,}"
    sourceFile="$fileName"

    printBanner "Creating new C source file $fileName"

    if [ -f "$baseDir/$fileName" ]; then
      printInfo "$baseDir/$fileName already exists; exiting"

      exit 0
    else
      printInfo "Creating $baseDir/$fileName"

      $EXEC_MKDIR "$baseDir"

      # Set source-file-c.tpl location and make it executable
      sourceFileCTpl=$(isExecutable "$SCRIPT_DIR"/template/source-file-c.tpl)

      # Execute template script
      "$sourceFileCTpl" "$fileName" > "$baseDir/$sourceFile"

      echoOnExit=true
    fi

  # Create a new C header file
  elif [[ "$fileName" == *.h ]]; then

    # Put the new header file in the "$baseDir/src" subdirectory, if present
    if [ -d "$baseDir/src" ]; then
      baseDir="$baseDir/src"
    fi

    fileName="${fileName,,}"
    headerFile="$fileName"

    printBanner "Creating new C header file $baseDir/$fileName"

    if [ -f "$baseDir/$fileName" ]; then
      printInfo "$baseDir/$fileName already exists; exiting"

      exit 0
    else
      printInfo "Creating $baseDir/$fileName"

      $EXEC_MKDIR "$baseDir"

      # Set header-file-c.tpl location and make it executable
      headerFileCTpl=$(isExecutable "$SCRIPT_DIR"/template/header-file-c.tpl)

      # Execute template script
      "$headerFileCTpl" "$fileName" > "$baseDir/$headerFile"

      echoOnExit=true
    fi

  # Create a new Bash shell script file
  elif [[ "$fileName" == *.sh ]]; then

    printBanner "Creating new Bash shell script $fileName"

    shellScript="$fileName"

    if [ -f "$baseDir/$fileName" ]; then
      printInfo "$baseDir/$fileName already exists; exiting"

      exit 0
    else
      printInfo "Creating $baseDir/$fileName"

      $EXEC_MKDIR "$baseDir"

      # Set bash-script.tpl location and make it executable
      bashScriptTpl=$(isExecutable "$SCRIPT_DIR"/template/bash-script.tpl)

      # Execute template script
      "$bashScriptTpl" "$fileName" > "$baseDir/$shellScript"

      $EXEC_CHMOD u+x "$baseDir/$shellScript"

      echoOnExit=true
    fi

  # Create a new Bash shell template file
  elif [[ "$fileName" == *.tpl ]]; then

    printBanner "Creating new Bash shell template $fileName"

    templateFile="$fileName"

    if [ -f "$baseDir/$fileName" ]; then
      printInfo "$baseDir/$fileName already exists; exiting"

      exit 0
    else
      printInfo "Creating $baseDir/$fileName"

      $EXEC_MKDIR "$baseDir"

      # Set template.tpl location and make it executable
      bashTemplateTpl=$(isExecutable "$SCRIPT_DIR"/template/bash-template.tpl)

      # Execute template script
      "$bashTemplateTpl" "$fileName" > "$baseDir/$templateFile"

      $EXEC_CHMOD u+x "$baseDir/$templateFile"

      echoOnExit=true
    fi

  fi

  # END Create new file
fi

if [ "$echoOnExit" == 'true' ]; then
  echo
fi

exit 0

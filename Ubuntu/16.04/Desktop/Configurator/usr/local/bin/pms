#!/bin/bash

#
# pms - DevOpsBroker Package Management System
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# Now that there are dpkg(1), APT(8), and snap(1) it is getting cumbersom to
# manage things even as simple as updating the system.
#
# This script is meant to change that.
#
# TODO: Need to implement find/search functionality
# -----------------------------------------------------------------------------
#


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/dob/ansi.conf if bittersweet function does not exist
if [[ ! "$(declare -F 'bittersweet')" ]]; then
  . /etc/dob/ansi.conf
fi

# Load /etc/dob/functions.conf if printBanner function does not exist
if [[ ! "$(declare -F 'printBanner')" ]]; then
  . /etc/dob/functions.conf
fi


################################## Functions ##################################

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	showHelp
# Description:	Displays help message to the user
# -----------------------------------------------------------------------------
function showHelp() {
  # BEGIN showHelp function

  printUsage "sudo pms dist-upgrade|full-upgrade|install|update|upgrade"
  printUsage "false" "pms info|list|which"

  echo
  echo -e "$(bold)Valid Privileged Commands:$(reset)"
  echo -e "$(bold padua)  dist-upgrade$(reset)\t\t\t"			"Performs an update and may remove some packages in the process"
  echo -e "$(bold padua)  full-upgrade$(reset)\t\t\t"			"Same as dist-upgrade; just different command"
  echo -e "$(bold padua)  install $(white)PACKAGE_NAME...$(reset)\t"	"Install one or more packages for installation or upgrading"
  echo -e "$(bold padua)  update$(reset)\t\t\t"				"Install the newest versions of all packages and snaps currently installed on the system"
  echo -e "$(bold padua)  upgrade$(reset)\t\t\t"			"Same as update; just different command"
  echo
  echo -e "$(bold)Valid User Commands:$(reset)"
  echo -e "$(bold padua)  info$(reset)\t\t\t"			"Display information about an APT package or Snap"
  echo -e "$(bold padua)  list$(reset)\t\t\t"			"Lists all installed APT packages and Snaps"
  echo -e "$(bold)        file.deb$(reset)\t"			"Lists contents of a .deb package file"
  echo -e "$(bold)        PACKAGE_NAME$(reset)\t"		"Lists all files that are included with PACKAGE_NAME"
  echo -e "$(bold padua)  which $(white)FILE$(reset)\t\t"	"Prints which package the given file belongs to"

  # END showHelp function
}


################################## Variables ##################################

sudoCommands=("dist-upgrade" "full-upgrade" "install" "update" "upgrade")
validCommands=("dist-upgrade" "full-upgrade" "info" "install" "list" "update" "upgrade" "which")

APT=/usr/bin/apt
APTCACHE=/usr/bin/apt-cache
CURL=/usr/bin/curl
DPKG=/usr/bin/dpkg
SNAP=/usr/bin/snap


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~ COMMAND/OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display help if no parameters given
if [ -z "$1" ]; then
  showHelp

  exit 1
fi

# Ensure the first parameter is a valid command
if [ $(containsElement "$1" "${validCommands[@]}") != "0" ]; then
  printError "pms" "Invalid command $1"
  echo

  showHelp

  exit 1
fi

# Display error if not running as root
if [ $(containsElement "$1" "${sudoCommands[@]}") == "0" ] && [ "$EUID" -ne 0 ]; then
  echo -e "$(bold)pms: $(bittersweet)Permission denied (you must be root)$(reset)"

  exit 1
fi

## Command
command="$1"


################################### Actions ###################################

if [ "$command" == "update" ] || [ "$command" == "upgrade" ]; then
  # BEGIN update/upgrade command

  # Update apt packages
  $APT update
  echo
  $APT list --upgradeable
  echo
  $APT -y upgrade
  echo

  # Update snap applications
  $SNAP refresh

  # END update/upgrade command
elif [ "$command" == "dist-upgrade" ] || [ "$command" == "full-upgrade" ]; then
  # BEGIN dist-upgrade/full-upgrade command

  # Update apt packages
  $APT update
  echo
  $APT list --upgradeable
  echo
  $APT -y full-upgrade
  echo

  # Update snap applications
  $SNAP refresh

  # END dist-upgrade/full-upgrade command
elif [ "$command" == "info" ]; then
  # BEGIN info command

  # Display usage if no package/snap name parameter given
  if [ -z "$2" ]; then
    printUsage "pms info package-name|snap-name"

    exit 1
  fi

  # List files installed from snap-name
  if $SNAP list | grep -q ^"$2"; then

    printBanner "Snap Information"

    $SNAP info "$2"

  else

    aptPkg=$($APTCACHE policy "$2" | awk -F ":" '/'$2'/{ print $1 }')

    # List files installed from package-name
    if [ "$aptPkg" == "$2" ]; then

      printBanner "APT Package Information"

      # List package information from dpkg first
      echo -e -n $(bold)
      $DPKG -l "$2"
      echo -e $(reset)

      # Then show package information from the APT cache
      $APTCACHE show "$2"

    fi
  fi

  # END info command
elif [ "$command" == "install" ]; then
  # BEGIN install command

  # Display usage if no package/snap name parameter given
  if [ -z "$2" ]; then
    printUsage "pms install package-name|snap-name"

    exit 1
  fi

  # Gather all package names from the command-line
  shift
  pkgNames="$@"

  if (( $# > 1 )); then
    # Assume APT installation if more than one package defined on command-line
    aptPkgVersion=true

  else
    # 1) Find the APT package to install
    printInfo "Searching for APT package $pkgNames"
    aptPkgVersion=$($APTCACHE show "$pkgNames" 2>/dev/null | awk -F ": " '/Version/{ print $2 }' | head -1)

    # 2) Find the Snap to install
    printInfo "Searching for Snap $pkgNames"
    snapPkgVersion=$($SNAP find "$pkgNames" 2>/dev/null | awk '/^'$pkgNames' /{ print $2 }')

    # 3) Take care of neither/both situations
    if [ -z "$aptPkgVersion" ] && [ -z "$snapPkgVersion" ]; then
      printError "pms" "Invalid APT Package/Snap $pkgNames"
      echo
      printUsage "pms install package-name|snap-name"

      exit 1

    elif [ ! -z "$aptPkgVersion" ] && [ ! -z "$snapPkgVersion" ]; then
      echo "Which $pkgNames version do you want to install?"
      select pkgVersion in "$aptPkgVersion (APT Package)" "$snapPkgVersion (Snap)"; do
	break;
      done
      echo

      if [[ "$pkgVersion" == *APT* ]]; then
	snapPkgVersion=""
      else
	aptPkgVersion=""
      fi

    fi
  fi

  # 4) Install APT Package/Snap
  printBanner "Installing $pkgNames"

  if [ ! -z "$aptPkgVersion" ]; then
    $APT -y install "$pkgNames"
  else
    $SNAP install "$pkgNames"
  fi

  echo

  # END install command
elif [ "$command" == "list" ]; then
  # BEGIN list command

  # List all installed packages if no package name given
  if [ -z "$2" ]; then
    printBanner "Installed APT packages"

    $APT list --installed

    echo
    printBanner "Installed Snaps"

    $SNAP list

  # List the contents of a .deb package file
  elif [ -f "$2" ] && [[ "$2" == *.deb ]]; then

    $DPKG --contents "$2"

  else
    isPkgInstalled=$($APTCACHE policy "$2" | awk '/Installed/{ print $2 }')

    # Display error if package name does not exist
    if [ -z "$isPkgInstalled" ]; then
      printError "pms" "Invalid package name $2"
      printUsage "pms list PACKAGE_NAME"

      exit 1

    # List files installed from package-name
    elif [ "$isPkgInstalled" != "(none)" ]; then
      echo -e "Installed: $isPkgInstalled\n"

      $DPKG -L "$2"

    # List files from Ubuntu package file list
    else
      echo -e "Installed: $isPkgInstalled\n"

      $CURL -s --no-buffer https://packages.ubuntu.com/$(lsb_release -sc)/all/$2/filelist | between "<pre>" "</pre>" 
    fi
  fi

  # END list command
elif [ "$command" == "which" ]; then
  # BEGIN which command

  # Display usage if no file parameter given
  if [ -z "$2" ]; then
    printUsage "pms which FILE"

    exit 1
  fi

  # Set filename variable
  filename="$2"

  # Attempt to find filename
  if [ ! -f "$filename" ]; then
    filename=$(which "$2")
  fi

  # Display error if file does not exist
  if [ ! -f "$filename" ]; then
    printError "pms" "$filename does not exist"
    echo
    printUsage "pms which FILE"

    exit 1
  fi

  echo -n "Package Name: "
  dpkg-query -S "$filename" | awk -F ":" '{ print $1 }'

  # END which command
fi

exit 0


#!/bin/bash

#
# ssh-key - DevOpsBroker utility for creating and managing SSH keys
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# Create and manage SSH keys.
#
# Some of the best practices for creating and using SSH keys include:
#   o Use one key per realm and per workstation --> 4 servers accessed from 2
#     workstations equals 8 private keys
#   o Use one key for a group of related servers (i.e. web/application/database)
#     and per workstation --> 3 servers accessed from 2 workstations equals 2
#     private keys
#
# Regardless, the following rules should always be followed:
#   o Use a long random passphrase when creating SSH keys to encrypt and
#     protect the private key
#   o Never copy a private key from one workstation to another, even if it is
#     protected with a passphrase
#   o If one workstation is compromised, revoke all those keys
#
# -----------------------------------------------------------------------------
#


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/dob/ansi.conf if bittersweet function does not exist
if [[ ! "$(declare -F 'bittersweet')" ]]; then
  . /etc/dob/ansi.conf
fi

# Load /etc/dob/functions.conf if printBanner function does not exist
if [[ ! "$(declare -F 'printBanner')" ]]; then
  . /etc/dob/functions.conf
fi


################################## Functions ##################################

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	findPrivateKey
# Description:	Finds which private SSH key the user is interested in
# -----------------------------------------------------------------------------
function findPrivateKey() {
  # BEGIN findPrivateKey function

  privateKeyList=()
  while IFS=  read -r -d $'\0'; do
    privateKeyList+=("$REPLY")
  done < <(find "$sshDir" -type f ! -name '*.pub' -print0)

  if [ ${#privateKeyList[@]} -gt 1 ]; then
    echo -e "$(bold)Which private SSH key do you want to work with?$(reset)"
    select privateKey in "${privateKeyList[@]}"; do
      break;
    done

  else
    privateKey="${privateKeyList[0]}"
  fi

  # END findPrivateKey function
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	findPublicKey
# Description:	Finds which public SSH key the user is interested in
# -----------------------------------------------------------------------------
function findPublicKey() {
  # BEGIN findPublicKey function

  publicKeyList=()
  while IFS=  read -r -d $'\0'; do
    publicKeyList+=("$REPLY")
  done < <(find "$sshDir" -type f -name '*.pub' -print0)

  if [ ${#publicKeyList[@]} -gt 1 ]; then
    echo -e "$(bold)Which public SSH key do you want to work with?$(reset)"
    select publicKey in "${publicKeyList[@]}"; do
      break;
    done

  else
    publicKey="${publicKeyList[0]}"
  fi

  # END findPublicKey function
}

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	showHelp
# Description:	Displays help message to the user
# -----------------------------------------------------------------------------
function showHelp() {
  # BEGIN showHelp function

  printUsage "ssh-key COMMAND [OPTION]..."

  echo
  echo -e "$(bold)Valid Commands:$(reset)"
  echo -e "$(bold padua)  clip$(reset)\t\t\t\t"				"Clips an SSH public key to the X11 clipboard"
  echo -e "$(bold padua)  copy$(reset)\t\t\t\t"				"Copies an SSH public key to username@remote_server"
  echo -e "$(bold padua)  fingerprint$(reset)\t\t\t"			"Shows fingerprint of all SSH public keys"
  echo -e "$(bold padua)  generate$(reset)\t\t\t"			"Generates an SSH key pair in the $HOME/.ssh directory"
  echo -e "$(bold padua)  list$(reset)\t\t\t\t"				"List all SSH public keys in the $HOME/.ssh directory"
  echo -e "$(bold padua)  passphrase$(reset)\t\t\t"			"Change the passphrase of an existing SSH private key"
  echo
  echo -e "$(bold)Valid Options:$(reset)"
  echo -e "$(bold padua)  -d $(yellow)DIRECTORY$(reset)\t\t\t"		"The directory where to find the .ssh/ subdirectory"
  echo -e "$(bold padua)  -p $(yellow)PORT$(reset)\t\t\t"		"The port to use when copying an SSH public key to a remote server"
  echo -e "$(bold padua)  -t $(yellow)ecdsa|ed25519|rsa|rsa1$(reset)\t"	"The key type to create; default is \"ed25519\""
  echo -e "$(bold padua)  -u $(yellow)USERNAME$(reset)\t\t\t"		"The username who owns the SSH keys"
  echo

  # END showHelp function
}


################################## Variables ##################################

validCommands=("clip" "copy" "fingerprint" "gen" "generate" "list" "pass" "passphrase")

SSH_COPY_ID=/usr/bin/ssh-copy-id
SSH_KEYGEN=/usr/bin/ssh-keygen
XCLIP=/usr/bin/xclip


#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display usage if incorrect parameters given
if [ -z "$1" ]; then
  showHelp

  exit 1
fi

# Ensure the first parameter is a valid command
if [ $(containsElement "$1" "${validCommands[@]}") != "0" ]; then
  printError "ssh-key" "Invalid command $1"
  echo

  showHelp

  exit 1
fi

## Options
command="$1"
keyType="ed25519"
sshDir="$HOME/.ssh"
sshPort="22"
username="$(whoami)"

# Process command-line options, if present
while [[ "$2" =~ ^- ]]; do

  if [ "$2" == "-d" ]; then

    # Display error and usage if incorrect parameters given
    if [ -z "$3" ]; then
      printError "ssh-key" "Missing directory parameter"
      echo
      printUsage "ssh-key $command -d DIRECTORY"

      exit 1
    elif [ ! -d "$3" ]; then
      printError "ssh-key" "Invalid directory: $3"
      echo
      printUsage "ssh-key $command -d DIRECTORY"

      exit 1
    fi

    sshDir="$3/.ssh"

    if [ ! -d "$sshDir" ]; then
      # Make SSH directory
      mkdir -p --mode=0700 "$sshDir"

      # Make directory to enable SSH multiplexing
      mkdir -p --mode=0700 "$sshDir/multiplex"
    fi

    shift 2

  elif [ "$2" == "-p" ]; then

    # Display error and usage if incorrect parameters given
    if [ "$command" != "copy" ]; then
      printError "ssh-key" "Invalid command $command: Port number parameter"
      echo
      printUsage "ssh-key copy -p PORT username@remote_server"

      exit 1
    elif [ -z "$3" ]; then
      printError "ssh-key" "Missing port number parameter"
      echo
      printUsage "ssh-key copy -p PORT username@remote_server"

      exit 1
    elif [[ ! "$3" =~ ^[0-9]+$ ]] || \
	[ "$3" -lt 1 ] || \
	[ "$3" -gt 65535]; then
      printError "ssh-key" "Invalid port number: $3"
      echo
      printUsage "ssh-key copy -p PORT username@remote_server"

      exit 1
    fi

    sshPort="$3"
    shift 2

  elif [ "$2" == "-t" ]; then

    # Display error and usage if incorrect parameters given
    if [ -z "$3" ]; then
      printError "ssh-key" "Missing key type parameter"
      echo
      printUsage "ssh-key $command -t ecdsa|ed25519|rsa|rsa1"

      exit 1
    elif [[ ! "$3" =~ ^(ecdsa|ed25519|rsa|rsa1)$ ]]; then
      printError "ssh-key" "Invalid key type: $3"
      echo
      printUsage "ssh-key $command -t ecdsa|ed25519|rsa|rsa1"

      exit 1
    fi

    keyType="$3"
    shift 2

  elif [ "$2" == "-u" ]; then

    # Display error and usage if incorrect parameters given
    if [ -z "$3" ]; then
      printError "ssh-key" "Missing username parameter"
      echo
      printUsage "ssh-key $command -u USERNAME"

      exit 1
    else
      nsswitch="$(getent passwd $3)"

      # Ensure the parameter is a valid username
      if [ ${#nsswitch} -eq 0 ]; then
	printError "ssh-key" "Invalid username: $3"
	echo
	printUsage "ssh-key $command -u USERNAME"

	exit 1
      fi

      username="$3"
      shift 2

    fi
  fi
done


################################### Actions ###################################

if [ "$command" == "clip" ]; then
  # BEGIN clip command

  # Find the public key the user wants to clip
  findPublicKey

  printInfo "Copying $publicKey to the clipboard"
  echo

  $XCLIP -selection clipboard < "$publicKey"

  # END clip command
elif [ "$command" == "copy" ]; then
  # BEGIN copy command

  # Display error and usage if incorrect parameters given
  if [ -z "$2" ]; then
    printError "ssh-key" "Missing username@remote_server parameter"
    echo
    printUsage "ssh-key copy username@remote_server"

    exit 1
  fi

  # userHost Parameter
  userHost="$2"

  # Find the public key the user wants to copy to the remote server
  findPublicKey

  printInfo "Copying $publicKey to $userHost"
  echo

  $SSH_COPY_ID -i "$publicKey" -p $sshPort $userHost

  # END copy command
elif [ "$command" == "fingerprint" ]; then
  # BEGIN fingerprint command

  # Generate the publicKeyList
  publicKeyList=()
  while IFS=  read -r -d $'\0'; do
    publicKeyList+=("$REPLY")
  done < <(find "$sshDir" -type f -name '*.pub' -print0)

  for publicKey in "${publicKeyList[@]}"; do
    $SSH_KEYGEN -l -v -f "$publicKey"
  done

  # END fingerprint command
elif [ "$command" == "gen" ] || [ "$command" == "generate" ]; then
  # BEGIN gen/generate command

  printBanner "Generating SSH Keys"
  hostName=$(hostname)

  echo -e "$(bold yellow)NOTE: It is highly recommended to use a long random passphrase$(reset)"
  echo

  # Question 1
  echo -n "What email address do you want to use for the SSH key? "
  read emailAddress
  echo

  if [ -z "$emailAddress" ]; then
    emailAddress="$username@$hostName"
  fi

  # Question 2
  sshFile="$username-$hostName-id_$keyType"
  echo -n "What filename do you want to use for the SSH key ($sshFile)? "
  read filename
  echo

  if [ ! -z "$filename" ]; then
    sshFile="$filename"
  fi

  # Generate SSH key
  $SSH_KEYGEN -t $keyType -C "$emailAddress-$(date -I)" -f "$sshDir/$sshFile"

  # Change directory and file ownership to $username
  chown -R $username:$username "$sshDir"

  # END gen/generate command
elif [ "$command" == "list" ]; then
  # BEGIN list command

  printBanner "Listing SSH Public Keys"

  find "$sshDir" -maxdepth 1 -type f -name "*.pub"

  echo

  # END list command
elif [ "$command" == "pass" ] || [ "$command" == "passphrase" ]; then
  # BEGIN pass/passphrase command

  printBanner "Changing SSH Private Key Passphrase"

  # Find the private key the user wants to change the passphrase
  findPrivateKey

  # Change the private SSH key passphrase
  $SSH_KEYGEN -f "$privateKey" -p

  # END pass/passphrase command
fi

exit 0


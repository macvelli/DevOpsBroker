#!/bin/bash

#
# convert-number - DevOpsBroker utility for converting between binary, decimal,
#		   octal, and hexadecimal number formats
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# Symbolic links with the following names are created and point to this script:
#
# o binary
# o decimal
# o hex
# o octal
#
# Parameters:
#   $1: Name of the number format to convert to
#   $2: The number to convert
#
# See https://www.linuxnix.com/convert-binaryhex-oct-decimal-linuxunix/ for
# more information on how to convert numbers using bc.
# -----------------------------------------------------------------------------
#


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/dob/ansi.conf if bittersweet function does not exist
if [[ ! "$(declare -F 'bittersweet')" ]]; then
  . /etc/dob/ansi.conf
fi

# Load /etc/dob/functions.conf if printBanner function does not exist
if [[ ! "$(declare -F 'printBanner')" ]]; then
  . /etc/dob/functions.conf
fi

# The name used to execute this script
execName=$(basename "$0")

# Number format from/to map
declare -A formatMap

formatMap["all"]="binary|decimal|hex|octal"
formatMap["binary"]="decimal|hex|octal"
formatMap["decimal"]="binary|hex|octal"
formatMap["hex"]="binary|decimal|octal"
formatMap["octal"]="binary|decimal|hex"

# Base number format map
declare -A baseNumberMap

baseNumberMap["binary"]="BASE_2_NUM"
baseNumberMap["decimal"]="BASE_10_NUM"
baseNumberMap["hex"]="BASE_16_NUM"
baseNumberMap["octal"]="BASE_8_NUM"


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~ COMMAND/OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~

if [ "$execName" == "convert-number" ]; then

  # Display usage if no parameters given
  if [ -z "$1" ]; then
    printUsage "convert-number ${formatMap['all']} ${formatMap['all']} NUMBER"

    exit 1
  fi

  # Display error if from number format is invalid
  if [[ ! "$1" =~ ^(binary|decimal|hex|octal)$ ]]; then
    printError "convert-number" "Invalid from number format $1"
    echo
    printUsage "convert-number ${formatMap['all']} ${formatMap['all']} NUMBER"

    exit 1
  fi

  # Display usage if no to number format parameter given
  if [ -z "$2" ]; then
    printUsage "convert-number $1 ${formatMap[$1]} ${baseNumberMap[$1]}"

    exit 1
  fi

  # Display error if to number format is invalid
  if [[ ! "$2" =~ ^(binary|decimal|hex|octal)$ ]]; then
    printError "convert-number" "Invalid to number format $2"
    echo
    printUsage "convert-number $fromFormat ${formatMap['all']} ${baseNumberMap[$fromFormat]}"

    exit 1
  fi

  # From number format is the first parameter
  fromFormat="$1"

  # To number format is the second parameter
  toFormat="$2"

  # Shift parameter list to align number to convert with the second parameter
  shift

else

  # Display usage if no parameters given
  if [ -z "$1" ]; then
    printUsage "$execName ${formatMap[$execName]} ${baseNumberMap[$execName]}"

    exit 1
  fi

  # Display error if to number format is invalid
  if [[ ! "$1" =~ ^(binary|decimal|hex|octal)$ ]]; then
    printError "$execName" "Invalid to number format $1"
    echo
    printUsage "$execName ${formatMap[$execName]} ${baseNumberMap[$execName]}"

    exit 1
  fi

  # From number format is the name used to execute this script
  fromFormat="$execName"

  # To number format is the first parameter
  toFormat="$1"

fi

# Display usage if no number parameter given
if [ -z "$2" ]; then
  printUsage "$fromFormat $toFormat ${baseNumberMap[$fromFormat]}"

  exit 1
fi

# Display error if number to convert is invalid
if [ "$fromFormat" == "binary" ] && [[ ! "$2" =~ ^[0-1]+$ ]]; then
  printError "binary" "Invalid binary number $2"
  echo
  printUsage "binary $toFormat ${baseNumberMap['binary']}"

  exit 1
elif [ "$fromFormat" == "decimal" ] && [[ ! "$2" =~ ^[0-9]+$ ]]; then
  printError "decimal" "Invalid decimal number $2"
  echo
  printUsage "decimal $toFormat ${baseNumberMap['decimal']}"

  exit 1
elif [ "$fromFormat" == "hex" ] && [[ ! "$2" =~ ^[a-fA-F0-9]+$ ]]; then
  printError "hex" "Invalid hex number $2"
  echo
  printUsage "hex $toFormat ${baseNumberMap['hex']}"

  exit 1
elif [ "$fromFormat" == "octal" ] && [[ ! "$2" =~ ^[0-7]+$ ]]; then
  printError "octal" "Invalid octal number $2"
  echo
  printUsage "octal $toFormat ${baseNumberMap['octal']}"

  exit 1
fi

# Number to convert is the second parameter
number="$2"


################################### Actions ###################################

if [ "$fromFormat" == "binary" ]; then

  if [ "$toFormat" == "decimal" ]; then
    echo "$number -> $(echo "ibase=2; $number" | bc)"
  elif [ "$toFormat" == "hex" ]; then
    echo "$number -> 0x$(echo "obase=16; ibase=2; $number" | bc)"
  elif [ "$toFormat" == "octal" ]; then
    echo "$number -> 0$(echo "obase=8; ibase=2; $number" | bc)"
  else
    echo "$number -> $number"
  fi

elif [ "$fromFormat" == "decimal" ]; then

  if [ "$toFormat" == "binary" ]; then
    echo "$number -> $(echo "obase=2; $number" | bc)"
  elif [ "$toFormat" == "hex" ]; then
    echo "$number -> 0x$(echo "obase=16; $number" | bc)"
  elif [ "$toFormat" == "octal" ]; then
    echo "$number -> 0$(echo "obase=8; $number" | bc)"
  else
    echo "$number -> $number"
  fi

elif [ "$fromFormat" == "hex" ]; then

  # bc only accepts hex numbers with uppercase A-F values
  hexInput=$number
  number="${number^^}"

  if [ "$toFormat" == "binary" ]; then
    echo "$hexInput -> $(echo "obase=2; ibase=16; $number" | bc)"
  elif [ "$toFormat" == "decimal" ]; then
    echo "$hexInput -> $(echo "ibase=16; $number" | bc)"
  elif [ "$toFormat" == "octal" ]; then
    echo "$hexInput -> 0$(echo "obase=8; ibase=16; $number" | bc)"
  else
    echo "$hexInput -> 0x$number"
  fi

else

  if [ "$toFormat" == "binary" ]; then
    echo "$number -> $(echo "obase=2; ibase=8; $number" | bc)"
  elif [ "$toFormat" == "decimal" ]; then
    echo "$number -> $(echo "ibase=8; $number" | bc)"
  elif [ "$toFormat" == "hex" ]; then
    echo "$number -> 0x$(echo "obase=16; ibase=8; $number" | bc)"
  else
    echo -n "$number -> "
    [[ "$number" == 0* ]] && echo "$number" || echo "0$number"
  fi

fi

exit 0


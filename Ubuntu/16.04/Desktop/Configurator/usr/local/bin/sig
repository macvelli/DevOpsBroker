#!/bin/bash

#
# sig - DevOpsBroker utility for creating and verifying PGP signatures of files
#
# Copyright (C) 2018 AUTHOR_NAME <email@address.com>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-45
#
# To create a PGP signature of a file:
#   o sig sign FILENAME
#
# To verify the PGP signature of a file:
#   o sig verify PGP_SIG FILENAME
#
# NOTE: ASCII-format detached signatures generate a .asc extension while binary
#	detached signatures generate a .sig extension
# -----------------------------------------------------------------------------
#


# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/dob/ansi.conf if bittersweet function does not exist
if [[ ! "$(declare -F 'bittersweet')" ]]; then
  . /etc/dob/ansi.conf
fi

# Load /etc/dob/functions.conf if printBanner function does not exist
if [[ ! "$(declare -F 'printBanner')" ]]; then
  . /etc/dob/functions.conf
fi


################################## Functions ##################################

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	showHelp
# Description:	Displays help message to the user
#
# Parameter $1: The command passed to sig on the command-line (optional)
# Parameter $2: The name of the signature file (optional)
# -----------------------------------------------------------------------------
function showHelp() {
  # BEGIN showHelp function

  if [ -z "$1" ]; then
    printUsage "sig sign [-a] FILE"
    printUsage "false" "sig verify PGP_SIG FILE"

    echo
    echo -e "$(bold)Valid Options:$(reset)"
    echo -e "$(bold padua)  -a\t"		"Create an ASCII-format detached signature file"
  elif [ "$1" == "sign" ]; then
    printUsage "sig sign [-a] FILE"

    echo
    echo -e "$(bold)Valid Options:$(reset)"
    echo -e "$(bold padua)  -a\t"		"Create an ASCII-format detached signature file"
  else
    if [ -z "$2" ]; then
      sigFile="SIG_FILE"
    else
      sigFile="$2"
    fi

    printUsage "sig verify $sigFile FILE"
  fi

  # END showHelp function
}


################################## Variables ##################################

validCommands=("sign" "verify")

GPG=/usr/bin/gpg

# Options
command="$1"
asciiFormat=false

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display usage if no parameters given
if [ -z "$1" ]; then
  showHelp

  exit 1
fi

# Display error if invalid command
if [ $(containsElement "$command" "${validCommands[@]}") != "0" ]; then
  printError "sig" "Invalid command: $command"
  echo

  showHelp

  exit 1
fi

# Display error if no file specified
if [ -z "$2" ]; then
  printError "sig" "Missing file parameter"
  echo

  showHelp "$command"

  exit 1
fi

if [ "$command" == "sign" ] && [ "$2" == "-a" ]; then
  asciiFormat=true

  shift

  # Display error if no file specified
  if [ -z "$2" ]; then
    printError "sig" "Missing file parameter"
    echo

    showHelp "$command"

    exit 1
  fi
fi

# Display error if invalid file
if [ ! -f "$2" ]; then
  printError "sig" "Cannot access '$2': No such file"
  echo

  showHelp "$command"

  exit 1
fi

if [ "$command" == "verify" ]; then

  # Display error if no file specified
  if [ -z "$3" ]; then
    printError "sig" "Missing file parameter"
    echo

    showHelp "$command" "$2"

    exit 1
  fi

  # Display error if invalid file
  if [ ! -f "$3" ]; then
    printError "sig" "Cannot access '$3': No such file"
    echo

    showHelp "$command"

    exit 1
  fi
fi


################################### Actions ###################################

if [ "$command" == "sign" ]; then

  if [ "$asciiFormat" == "false" ]; then
    $GPG --detach-sig "$2"
  else
    $GPG --detach-sig -a "$2"
  fi

elif [ "$command" == "verify" ]; then

  $GPG --verify "$2" "$3"

fi

exit 0


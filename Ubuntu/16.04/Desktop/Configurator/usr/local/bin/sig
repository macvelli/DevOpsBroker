#!/bin/bash

#
# sig - DevOpsBroker utility for creating and verifying PGP signatures of files
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-45
#
# To create a PGP signature of a file:
#   o sig sign FILENAME
#
# To verify the PGP signature of a file:
#   o sig verify PGP_SIG FILENAME
#
# NOTE: ASCII-format detached signatures generate a .asc extension while binary
#	detached signatures generate a .sig extension
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
  source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;38;2;255;100;100mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
  source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"${bold}${bittersweet}Cannot load '/etc/devops/exec.conf': No such file${reset}"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
  source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"${bold}${bittersweet}Cannot load '/etc/devops/functions.conf': No such file${reset}"}

################################## Functions ##################################

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:	showHelp
# Description:	Displays help message to the user
# -----------------------------------------------------------------------------
function showHelp() {
  # BEGIN showHelp function

  if [ -z "$command" ]; then
    printUsage "sig sign ${gold}[-a] ${yellow}FILE"
    printUsage 'false' 'sig verify PGP_SIG FILE'

    echo ${bold}
    echo "Valid Commands:${romantic}"
    echo '  sign  	Create a detached signature of the specified FILE'
    echo '  verify	Verify the specified FILE was signed using the detached signature PGP_SIG'
    echo ${reset}

  elif [ $command == 'sign' ]; then
    printUsage "sig sign ${gold}[-a] ${yellow}FILE"

    echo ${bold}
    echo "Valid Options:${romantic}"
    echo '  -a	Create an ASCII-format detached signature file'
    echo ${reset}

  elif [ $command == 'verify' ]; then
    if [ -z "$sigFile" ]; then
      printUsage 'sig verify PGP_SIG FILE'
    else
      printUsage "sig verify $sigFile FILE"
    fi

    echo
  fi

  # END showHelp function
}

################################## Variables ##################################

validCommands=("sign" "verify")

# Options
command="$1"
fileName=''
asciiFormat='false'

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display usage if no parameters given
if [ -z "$command" ]; then
  showHelp

  exit 1
fi

# Display error if invalid command
if [ $(containsElement "$command" "${validCommands[@]}") != '0' ]; then
  printError 'sig' "Invalid command: '$command'"
  command=''
  echo

  showHelp

  exit 1
fi

if [ $command == 'sign' ]; then

  if [ "$2" == '-a' ]; then
    asciiFormat=true

    # File is the third parameter
    fileName="$3"
  else
    # File is the second parameter
    fileName="$2"
  fi

elif [ $command == 'verify' ]; then

  # Signature file is the second parameter
  sigFile="$2"

  # File is the third parameter
  fileName="$3"

  errorMessage=$(isValidFile 'sig' "$sigFile")

  # Display error if signature file parameter is missing or invalid
  if [ "$errorMessage" != '0' ]; then
    echo "$errorMessage"
    echo
    showHelp

    exit 1
  fi

fi

errorMessage=$(isValidFile 'sig' "$fileName")

# Display error if file parameter is missing or invalid
if [ "$errorMessage" != '0' ]; then
  echo "$errorMessage"
  echo
  showHelp

  exit 1
fi

################################### Actions ###################################

if [ "$command" == 'sign' ]; then

  if [ "$asciiFormat" == 'false' ]; then
    $EXEC_GPG --detach-sig "$fileName"
  else
    $EXEC_GPG --detach-sig -a "$fileName"
  fi

elif [ "$command" == 'verify' ]; then

  $EXEC_GPG --verify "$sigFile" "$fileName"

fi

exit 0

#!/bin/bash

#
# firewall - Administrative tool for managing iptables/ip6tables
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# The philosophy behind this script is to allow the user easy access to all
# relevant information regarding firewall settings on his or her machine.
#
# The options provided allow the user to sharpen the focus of their work while
# utilizing this script.
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
  source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;38;2;255;100;100mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
  source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"${bold}${bittersweet}Cannot load '/etc/devops/exec.conf': No such file${reset}"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
  source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"${bold}${bittersweet}Cannot load '/etc/devops/functions.conf': No such file${reset}"}

################################## Functions ##################################

# ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
# Function:	showHelp
# Description:	Displays help message to the user
# -----------------------------------------------------------------------------
function showHelp() {
  # BEGIN showHelp function

  if [ -z "$command" ]; then
    printUsage "firewall list ${gold}[-4|-6] [raw|mangle|nat|filter] [CHAIN_NAME]"
    printUsage 'false' 'firewall log'

    echo ${bold}
    echo "Valid Commands:${romantic}"
    echo '  list	List iptables/ip6tables firewall rules'
    echo '  log 	Display summary of packets blocked by the firewall'
    echo ${reset}

  elif [ $command == 'list' ]; then
    printUsage "firewall list ${gold}[-4|-6] [raw|mangle|nat|filter] [CHAIN_NAME]"

    echo ${bold}
    echo "Valid Options:${romantic}"
    echo '  -4		View IPv4 Firewall configuration'
    echo '  -6		View IPv6 Firewall configuration'
    echo '  raw		Limit output to the RAW table'
    echo '  mangle	Limit output to the MANGLE table'
    echo '  nat		Limit output to the NAT table'
    echo '  filter	Limit output to the FILTER table'
    echo ${reset}
  fi

  # END showHelp function
}

################################## Variables ##################################

## Bash exec variables
EXEC_DMESG=/bin/dmesg
EXEC_FIRELOG=/usr/local/bin/firelog

IPTABLES=/sbin/iptables
IP6TABLES=/sbin/ip6tables

sudoCommands=('list')
validCommands=(${sudoCommands[@]} 'log')

## Options
command="$1"
ipv4=true
ipv6=true
table=''
chain=''

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display help if no parameters given
if [ -z "$command" ]; then
  showHelp

  exit 1
fi

# Ensure the first parameter is a valid command
if [ $(containsElement "$command" "${validCommands[@]}") != '0' ]; then
  printError 'firewall' "Invalid command: '$command'"
  command=''
  echo

  showHelp

  exit 1
fi

# Display error if not running as root
if [ $(containsElement "$command" "${sudoCommands[@]}") == '0' ] && [ "$EUID" -ne 0 ]; then
  echo "${bold}firewall: ${bittersweet}Permission denied (you must be root)${reset}"

  exit 1
fi

# Process command-line options
while [[ "$2" == -* ]]; do

  if [ "$2" == '-4' ]; then
    ipv4=true
    ipv6=false
  elif [ "$2" == '-6' ]; then
    ipv4=false
    ipv6=true
  else
    # Display error and help if option parameter is not valid
    printError 'firewall' "Invalid option: '$2'"
    echo
    showHelp

    exit 1
  fi

  shift

done

################################### Actions ###################################

if [ $command = 'list' ]; then
  # BEGIN list Command

  # Process table/chain parameters
  if [ ! -z "$2" ]; then
    table="${2,,}"	# Convert input to lower case

    # Display usage and error if table parameter is not valid
    if [[ ! "$table" =~ ^raw|mangle|nat|filter$ ]]; then
      printError 'firewall' "Cannot access '$table': No such iptables table"
      echo
      showHelp

      exit 1
    fi

    if [ ! -z "$3" ]; then
      chain="$3"
    fi
  fi

  if [ "$ipv4" == 'true' ]; then
    # BEGIN iptables list

    banner=${white}'iptables firewall rules'${wisteria}

    echo ${bold} ${wisteria}
    echo '┌─────────────────────────┐'
    echo "│ $banner"		   '│'
    echo '└─────────────────────────┘'
    echo

    if [ -z $table ] || [ $table == 'raw' ]; then
      echo -n ${pumpkin}
      echo 'iptables RAW table'
      echo '¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯'
      echo -n ${white}

      $IPTABLES -t raw --line-numbers -n -v -L $chain
      echo
    fi

    if [ -z $table ] || [ $table == 'mangle' ]; then
      echo -n ${pumpkin}
      echo 'iptables MANGLE table'
      echo '¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯'
      echo -n ${white}

      $IPTABLES -t mangle --line-numbers -n -v -L $chain
      echo
    fi

    if [ -z $table ] || [ $table == 'nat' ]; then
      echo -n ${pumpkin}
      echo 'iptables NAT table'
      echo '¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯'
      echo -n ${white}

      $IPTABLES -t nat --line-numbers -n -v -L $chain
      echo
    fi

    if [ -z $table ] || [ $table == 'filter' ]; then
      echo -n ${pumpkin}
      echo 'iptables FILTER table'
      echo '¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯'
      echo -n ${white}

      $IPTABLES -t filter --line-numbers -n -v -L $chain
      echo
    fi

    # END iptables list
  fi

  if [ "$ipv6" = 'true' ]; then
    # BEGIN ip6tables list

    if [ "$ipv4" = 'true' ]; then
      echo -n ${bold}${wisteria}
    else
      echo ${bold} ${wisteria}
    fi

    banner=${white}'ip6tables firewall rules'${wisteria}

    echo '┌──────────────────────────┐'
    echo "│ $banner"		    '│'
    echo '└──────────────────────────┘'
    echo

    if [ -z $table ] || [ $table = 'raw' ]; then
      echo -n ${pumpkin}
      echo 'ip6tables RAW table'
      echo '¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯'
      echo -n ${white}

      $IP6TABLES -t raw --line-numbers -n -v -L $chain
      echo
    fi

    if [ -z $table ] || [ $table = 'mangle' ]; then
      echo -n ${pumpkin}
      echo 'ip6tables MANGLE table'
      echo '¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯'
      echo -n ${white}

      $IP6TABLES -t mangle --line-numbers -n -v -L $chain
      echo
    fi

    if [ -z $table ] || [ $table = 'nat' ]; then
      echo -n ${pumpkin}
      echo 'ip6tables NAT table'
      echo '¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯'
      echo -n ${white}

      $IP6TABLES -t nat --line-numbers -n -v -L $chain
      echo
    fi

    if [ -z $table ] || [ $table = 'filter' ]; then
      echo -n ${pumpkin}
      echo 'ip6tables FILTER table'
      echo '¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯'
      echo -n ${white}

      $IP6TABLES -t filter --line-numbers -n -v -L $chain
      echo
    fi

    # END ip6tables list
  fi

  # END list Command
elif [ $command = 'log' ]; then

  $EXEC_DMESG -t | $EXEC_FIRELOG

fi

exit 0

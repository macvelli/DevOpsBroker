#!/bin/bash

#
# venture - DevOpsBroker utility for managing software projects including
#	    project creation, compile, build, test, and deploy
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# TODO: new - Create new files (.s/.cpp/.whatever)
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
	source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;91mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
	source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"[1;91mCannot load '/etc/devops/exec.conf': No such file[0m"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
	source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"[1;91mCannot load '/etc/devops/functions.conf': No such file[0m"}

## Script information
SCRIPT_INFO=( $($EXEC_SCRIPTINFO "$BASH_SOURCE") )
SCRIPT_DIR="${SCRIPT_INFO[0]}"

################################## Functions ##################################

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     createDirectory
# Description:  Creates a directory
#
# Parameter $1: The name of the directory to create within the base directory
# -----------------------------------------------------------------------------
function createDirectory() {
	if [ ! -d "$baseDir/$1" ]; then
		printInfo "Creating $baseDir/$1 directory"
		$EXEC_MKDIR "$baseDir/$1"
	fi
}

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     showHelp
# Description:  Displays help message to the user
# -----------------------------------------------------------------------------
function showHelp() {
	printUsage "venture create ${gold}[-d directory] ${yellow}PROJECT_NAME"
	printUsage 'false' "venture new ${gold}[-d directory] ${yellow}FILE"

	echo ${bold}
	echo "Valid Commands:${romantic}"
	echo -e ${yellow}'  create\t'        ${romantic}'Create a brand new C project'
	echo -e ${yellow}'  fileinfo\t'      ${romantic}'Generate size and sha256 hash for a file'
	echo -e ${yellow}'  new\t\t'         ${romantic}'Create a new file'
	echo ${reset}

	echo -n ${bold}
	echo "Valid Options:${romantic}"
	echo -e ${gold}'  -d directory\t'  ${romantic}'The target directory'
	echo ${reset}
}

################################## Variables ##################################

## Bash exec variables
EXEC_SHA256SUM=/usr/bin/sha256sum

## Options
command="$1"
baseDir='.'

## Variables
validCommands=('create' 'fileinfo' 'new')
echoOnExit=false

declare -A paramNameMap

paramNameMap['create']='PROJECT_NAME'
paramNameMap['fileinfo']='FILE'
paramNameMap['new']='FILE'

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display help if no parameters given
if [ -z "$command" ]; then
	showHelp

	exit 1
fi

# Ensure the first parameter is a valid command
if [ $(containsElement "$command" "${validCommands[@]}") != '0' ]; then
	printError 'venture' "Invalid command: '$command'"
	command=''
	echo
	showHelp

	exit 1
fi

# Process command-line options
while [[ "$2" == -* ]]; do

	# Base directory option
	if [ "$2" == '-d' ]; then

		errorMessage=$(isValidDirectory 'venture' "$3")

		# Display error if directory parameter is missing or invalid
		if [ "$errorMessage" != '0' ]; then
			echo "$errorMessage"
			echo
			printUsage "venture $command ${gold}-d directory ${yellow}${paramNameMap[$command]}"

			exit 1
		fi

		# baseDir is the third command-line parameter
		baseDir="$3"
		shift 2
	else
		# Display error and help if option parameter is not valid
		printError 'venture' "Invalid option: '$2'"
		echo
		printUsage "venture $command ${gold}[-d directory] ${yellow}${paramNameMap[$command]}"

		exit 1
	fi
done

if [ "$command" == 'create' ]; then
	projectName="$2"

	# Display error and usage if no project name parameter given
	if [ -z "$projectName" ]; then
		printError 'venture' 'Missing project name'
		echo
		printUsage "venture create ${paramNameMap['create']}"

		exit 1
	fi

	baseDir="$baseDir/$projectName"

else
	fileName="$2"

	# Display error and usage if no file name parameter given
	if [ -z "$fileName" ]; then
		printError 'venture' 'Missing file name'
		echo
		printUsage "venture $command ${paramNameMap['$command']}"

		exit 1
	fi

	# Make baseDir if not already exists
	if [ ! -d "$baseDir" ]; then
		$EXEC_MKDIR "$baseDir"
	fi

	if [ "$command" == 'new' ]; then
		# Display error and usage if unsupported file parameter given
		if [[ ! "$fileName" =~ ^.+\.(c|h|conf|html|sh|tpl)$ ]] && [ "$fileName" != 'makefile' ]; then
			printError 'venture' "Unsupported file name '$fileName'"
			echo
			printUsage "venture new ${paramNameMap['new']}"

			echo ${bold}
			echo 'Valid File Types:'
			echo -e ${yellow}'  source.c\t'      ${romantic}'C language source file'
			echo -e ${yellow}'  header.h\t'      ${romantic}'C language header file'
			echo -e ${yellow}'  linux.conf\t'    ${romantic}'Linux configuration file'
			echo -e ${yellow}'  index.html\t'    ${romantic}'Blank HTML5 file'
			echo -e ${yellow}'  makefile\t'      ${romantic}'Makefile build file'
			echo -e ${yellow}'  script.sh\t'     ${romantic}'Bash shell script file'
			echo -e ${yellow}'  template.tpl\t'  ${romantic}'Bash shell template file'
			echo ${reset}

			exit 1
		fi

		# Display file exists info message and exit
		if [ -f "$baseDir/$fileName" ]; then
			printInfo "$baseDir/$fileName already exists; exiting"
			exit 0
		fi

		if [[ "$fileName" == *.c ]] || [[ "$fileName" == *.h ]]; then
			fileName="${fileName,,}"

			# Put the new source file in the "$baseDir/src" subdirectory, if present
			if [ -d "$baseDir/src" ]; then
				baseDir="$baseDir/src"
			fi
		fi
	fi
fi

################################### Actions ###################################

if [ "$command" == 'create' ]; then
	# BEGIN Create new project

	printBanner "Creating new project $projectName"

	createDirectory 'bin'
	createDirectory 'doc'
	createDirectory 'lib'
	createDirectory 'res'
	createDirectory 'src'
	createDirectory 'test'

	if [ ! -f "$baseDir/makefile" ]; then
		# Create new makefile
		printInfo "Creating $baseDir/makefile"

		# Set makefile.tpl location and make it executable
		makefileTpl=$(isExecutable "$SCRIPT_DIR"/template/makefile.tpl)

		# Execute template script
		"$makefileTpl" "$projectName" > "$baseDir/makefile"

		echoOnExit=true
	fi

	# Create a new C source file
	sourceFile="${projectName,,}.c"
	baseDir="$baseDir/src"

	if [ ! -f "$baseDir/$sourceFile" ]; then
		# Create a new C source file
		printInfo "Creating $baseDir/$sourceFile"

		# Set source-file-c.tpl location and make it executable
		sourceFileCTpl=$(isExecutable "$SCRIPT_DIR"/template/source-file-c.tpl)

		# Execute template script
		"$sourceFileCTpl" "$sourceFile" > "$baseDir/$sourceFile"

		echoOnExit=true
	fi

	# END Create new project
elif [ "$command" == 'fileinfo' ]; then
	# BEGIN Generate file information

	fileSize=$($EXEC_STAT --format=%s "$fileName")
	sha256sum=$($EXEC_SHA256SUM "$fileName")

	# Set fileinfo.tpl location and make it executable
	fileInfoTpl=$(isExecutable "$SCRIPT_DIR"/template/fileinfo.tpl)

	"$fileInfoTpl" "$fileName" $fileSize $sha256sum  > "$baseDir/fileinfo.html"

	echoOnExit=true

	# END Generate file information
elif [ "$command" == "new" ]; then
	# BEGIN Create new file

	# Create a new C source file
	if [[ "$fileName" == *.c ]]; then
		printInfo "Creating new C source file $fileName"

		# Set source-file-c.tpl location and make it executable
		sourceFileCTpl=$(isExecutable "$SCRIPT_DIR"/template/source-file-c.tpl)

		# Execute template script
		"$sourceFileCTpl" "$fileName" > "$baseDir/$fileName"

		echoOnExit=true

	# Create a new C header file
	elif [[ "$fileName" == *.h ]]; then
		printInfo "Creating new C header file $fileName"

		# Set header-file-c.tpl location and make it executable
		headerFileCTpl=$(isExecutable "$SCRIPT_DIR"/template/header-file-c.tpl)

		# Execute template script
		"$headerFileCTpl" "$fileName" > "$baseDir/$fileName"

		echoOnExit=true

	# Create a new Linux configuration file
	elif [[ "$fileName" == *.conf ]]; then
		printInfo "Creating new Linux configuration file $fileName"

		# Set linux-conf.tpl location and make it executable
		linuxConfTpl=$(isExecutable "$SCRIPT_DIR"/template/linux-conf.tpl)

		# Execute template script
		"$linuxConfTpl" "$fileName" > "$baseDir/$fileName"

		echoOnExit=true

	# Create a new blank HTML5
	elif [[ "$fileName" == *.html ]]; then
		printInfo "Creating new blank HTML5 file $fileName"

		# Set html.tpl location and make it executable
		html5Tpl=$(isExecutable "$SCRIPT_DIR"/template/html5.tpl)

		# Execute template script
		"$html5Tpl" > "$baseDir/$fileName"

		echoOnExit=true

	# Create a new Makefile build file
	elif [ "$fileName" == 'makefile' ]; then
		printInfo "Creating new Makefile build file"

		# Set makefile.tpl location and make it executable
		makefileTpl=$(isExecutable "$SCRIPT_DIR"/template/makefile.tpl)

		# Execute template script
		"$makefileTpl" 'foo' > "$baseDir/makefile"

		echoOnExit=true

	# Create a new Bash shell script file
	elif [[ "$fileName" == *.sh ]]; then
		printInfo "Creating new Bash shell script $fileName"

		# Set bash-script.tpl location and make it executable
		bashScriptTpl=$(isExecutable "$SCRIPT_DIR"/template/bash-script.tpl)

		# Execute template script and make Bash script executable
		"$bashScriptTpl" "$fileName" > "$baseDir/$fileName"
		$EXEC_CHMOD u+x "$baseDir/$fileName"

		echoOnExit=true

	# Create a new Bash shell template file
	elif [[ "$fileName" == *.tpl ]]; then
		printInfo "Creating new Bash shell template $fileName"

		# Set template.tpl location and make it executable
		bashTemplateTpl=$(isExecutable "$SCRIPT_DIR"/template/bash-template.tpl)

		# Execute template script
		"$bashTemplateTpl" "$fileName" > "$baseDir/$fileName"

		$EXEC_CHMOD u+x "$baseDir/$fileName"

		echoOnExit=true
	fi

	# END Create new file
fi

if [ "$echoOnExit" == 'true' ]; then
  echo
fi

exit 0

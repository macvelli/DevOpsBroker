#!/bin/bash

#
# gnome-config - DevOpsBroker script for configuring GNOME GSettings
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <https://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# NOTE: This script *cannot* be executed as root. The dconf settings will not
#	apply to the user otherwise
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
	source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;91mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
	source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"[1;91mCannot load '/etc/devops/exec.conf': No such file[0m"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
	source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"[1;91mCannot load '/etc/devops/functions.conf': No such file[0m"}

# Display error if running as root
if [ "$USER" == 'root' ]; then
	printError 'gnome-config' 'Permission denied (you cannot be root)'
	exit 1
fi

################################## Functions ##################################

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     showHelp
# Description:  Displays help message to the user
# -----------------------------------------------------------------------------
function showHelp() {
	# BEGIN showHelp function

	if [ "$command" == 'all' ]; then
		printUsage 'gnome-config all'
		echo ${romantic}
		echo 'Executes all gnome-config commands'${reset}
	elif [ "$command" == 'compiz' ]; then
		printUsage 'gnome-config compiz'
		echo ${romantic}
		echo 'Performs compiz configurations including enabling workspaces'${reset}
	elif [ "$command" == 'gnome' ]; then
		printUsage 'gnome-config gnome'
		echo ${romantic}
		echo 'Performs configurations of Gnome applications such as Terminal'${reset}
	elif [ "$command" == 'nautilus' ]; then
		printUsage 'gnome-config nautilus'
		echo ${romantic}
		echo "Sets ${yellow}'Show Hidden Files'${romantic} Nautilus default to ${yellow}'false'"${reset}
	elif [ "$command" == 'unity' ]; then
		printUsage 'git-repo delete-branch BRANCH_NAME'
		echo ${romantic}
		echo 'Performs Unity-specific configurations such as title bar placement'${reset}
	fi

	# END showHelp function
}

################################## Variables ##################################

## Bash exec variables
EXEC_DCONF=/usr/bin/dconf
EXEC_GSETTINGS=/usr/bin/gsettings

## Options
command="$1"

## Variables
echoOnExit=false
showCommandHelp=false
validCommands=('all' 'compiz' 'gnome' 'nautilus' 'unity')

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if [ "$command" == 'help' ]; then
	showCommandHelp=true
	command="$2"
fi

# Display usage if no parameters given
if [ -z "$command" ]; then
	printUsage "gnome-config ${gold}[help]${yellow} { all | compiz | gnome | nautilus | unity }"
	exit 1
fi

# Display error if invalid command
if [ $(containsElement "$command" "${validCommands[@]}") != '0' ]; then
	printError 'gnome-config' "Invalid command: $command"
	echo
	printUsage "gnome-config ${gold}[help]${yellow} { all | compiz | gnome | nautilus | unity }"

	exit 1
fi

if [ "$showCommandHelp" == 'true' ]; then
	showHelp
	exit 0
fi

################################### Actions ###################################

# Clear screen only if called from command line
if [ $SHLVL -eq 2 ]; then
	clear
fi

printBox "DevOpsBroker $UBUNTU_RELEASE GSettings Configurator" 'true'

if [ "$command" == 'compiz' ] || [ "$command" == 'all' ]; then

	#
	# Enable workspaces
	#   o System Settings -> Appearance -> Behavior
	#
	echo 'Want to enable workspaces?'
	select workspaces in 'Yes' 'No'; do
		echo
		if [ "$workspaces" == 'Yes' ]; then
			printInfo 'Enabling workspaces'

			# Enable workspaces
			$EXEC_DCONF write /org/compiz/profiles/unity/plugins/core/hsize 2
			$EXEC_DCONF write /org/compiz/profiles/unity/plugins/core/vsize 2
		else
			printInfo 'Disabling workspaces'

			# Disable workspaces
			$EXEC_DCONF write /org/compiz/profiles/unity/plugins/core/hsize 1
			$EXEC_DCONF write /org/compiz/profiles/unity/plugins/core/vsize 1
		fi

		echoOnExit=true
		break;
	done

	# Set 'Detect Refresh Rate' to 'false'
	if [ "$($EXEC_DCONF read /org/compiz/profiles/unity/plugins/composite/detect-refresh-rate)" != 'false' ]; then
		printInfo "Setting 'Detect Refresh Rate' to 'false'"

		$EXEC_DCONF write /org/compiz/profiles/unity/plugins/composite/detect-refresh-rate false
		echoOnExit=true
	fi

	# Set 'Default Moving Window Mode' to 'Rectangle'
	if [ "$($EXEC_DCONF read /org/compiz/profiles/unity/plugins/move/mode)" != '2' ]; then
		printInfo "Setting 'Default Moving Window Mode' to 'Rectangle'"

		$EXEC_DCONF write /org/compiz/profiles/unity/plugins/move/mode 2
		echoOnExit=true
	fi

	# Set 'Use a double-border when moving window' to 'false'
	if [ "$($EXEC_DCONF read /org/compiz/profiles/unity/plugins/move/increase-border-contrast)" != 'false' ]; then
		printInfo "Setting 'Use a double-border when moving window' to 'false'"

		$EXEC_DCONF write /org/compiz/profiles/unity/plugins/move/increase-border-contrast false
		echoOnExit=true
	fi

	# Set 'Use desktop average colors when moving window' to 'true'
	if [ "$($EXEC_DCONF read /org/compiz/profiles/unity/plugins/move/use-desktop-average-color)" != 'true' ]; then
		printInfo "Setting 'Use desktop average colors when moving window' to 'true'"

		$EXEC_DCONF write /org/compiz/profiles/unity/plugins/move/use-desktop-average-color true
		echoOnExit=true
	fi

	# Set 'Sync to VBlank' to 'false'
	if [ "$($EXEC_DCONF read /org/compiz/profiles/unity/plugins/opengl/sync-to-vblank)" != 'false' ]; then
		printInfo "Setting 'Sync to VBlank' to 'false'"

		$EXEC_DCONF write /org/compiz/profiles/unity/plugins/opengl/sync-to-vblank false
		echoOnExit=true
	fi

	# Set 'Default Resize Window Mode' to 'Rectangle'
	if [ "$($EXEC_DCONF read /org/compiz/profiles/unity/plugins/resize/mode)" != '2' ]; then
		printInfo "Setting 'Default Resize Window Mode' to 'Rectangle'"

		$EXEC_DCONF write /org/compiz/profiles/unity/plugins/resize/mode 2
		echoOnExit=true
	fi

	# Set 'Use a double-border when resizing window' to 'false'
	if [ "$($EXEC_DCONF read /org/compiz/profiles/unity/plugins/resize/increase-border-contrast)" != 'false' ]; then
		printInfo "Setting 'Use a double-border when resizing window' to 'false'"

		$EXEC_DCONF write /org/compiz/profiles/unity/plugins/resize/increase-border-contrast false
		echoOnExit=true
	fi

	# Set 'Use desktop average colors when resizing window' to 'true'
	if [ "$($EXEC_DCONF read /org/compiz/profiles/unity/plugins/resize/use-desktop-average-color)" != 'true' ]; then
		printInfo "Setting 'Use desktop average colors when resizing window' to 'true'"

		$EXEC_DCONF write /org/compiz/profiles/unity/plugins/resize/use-desktop-average-color true
		echoOnExit=true
	fi

fi

if [ "$command" == 'gnome' ] || [ "$command" == 'all' ]; then

	printBanner 'Gnome Terminal Settings'

	profilePath='/org/gnome/terminal/legacy/profiles:/'
	profilePath="${profilePath}$($EXEC_DCONF list $profilePath)"

	# Set 'Default Columns Size' to '160'
	if [ "$($EXEC_DCONF read ${profilePath}default-size-columns)" != '160' ]; then
		printInfo "Setting 'Default Columns Size' to '160'"

		$EXEC_DCONF write "${profilePath}default-size-columns" 160
		echoOnExit=true
	fi

	# Set 'Default Rows Size' to '40'
	if [ "$($EXEC_DCONF read ${profilePath}default-size-rows)" != '40' ]; then
		printInfo "Setting 'Default Rows Size' to '40'"

		$EXEC_DCONF write "${profilePath}default-size-rows" 40
		echoOnExit=true
	fi

	# Set 'Scrollback Lines' to '16384'
	if [ "$($EXEC_DCONF read ${profilePath}scrollback-lines)" != '16384' ]; then
		printInfo "Setting 'Scrollback Lines' to '16384'"

		$EXEC_DCONF write "${profilePath}scrollback-lines" 16384
		echoOnExit=true
	fi

	# Set 'Use Theme Colors' to 'true'
	if [ "$($EXEC_DCONF read ${profilePath}use-theme-colors)" != 'true' ]; then
		printInfo "Setting 'Use Theme Colors' to 'true'"

		$EXEC_DCONF write "${profilePath}use-theme-colors" true
		echoOnExit=true
	fi

	# Set 'Use Theme Transparency' to 'true'
	if [ "$($EXEC_DCONF read ${profilePath}use-theme-transparency)" != 'true' ]; then
		printInfo "Setting 'Use Theme Transparency' to 'true'"

		$EXEC_DCONF write "${profilePath}use-theme-transparency" true
		echoOnExit=true
	fi

	# Set 'Profile Name' to 'Default'
	if [ "$($EXEC_DCONF read ${profilePath}visible-name)" != 'Default' ]; then
		printInfo "Setting 'Profile Name' to 'Default'"

		$EXEC_DCONF write "${profilePath}visible-name" \"Default\"
		echoOnExit=true
	fi

fi

if [ "$command" == 'nautilus' ] || [ "$command" == 'all' ]; then

	# Set 'Show Hidden Files' to 'false' in Nautilus
	if [ "$($EXEC_DCONF read /org/gtk/settings/file-chooser/show-hidden)" == 'true' ]; then
		printInfo "Setting 'Show Hidden Files' Nautilus default to 'false'"

		$EXEC_GSETTINGS set org.gtk.Settings.FileChooser show-hidden false
		echoOnExit=true
	fi

fi

if [ "$command" == 'unity' ] || [ "$command" == 'all' ]; then

	#
	# Show application menus in window title bar
	#   o System Settings -> Appearance -> Behavior
	#
	echo 'Want the menus in the title bar for a window?'
	select titleBarMenus in 'Yes' 'No'; do
		echo
		if [ "$titleBarMenus" == 'Yes' ]; then
			printInfo 'Enabling title bar menus'

			# Enable integrated menus
			$EXEC_GSETTINGS set com.canonical.Unity integrated-menus true
		else
			printInfo 'Disabling title bar menus'

			# Disable integrated menus
			$EXEC_GSETTINGS set com.canonical.Unity integrated-menus false
		fi

		echo
		break;
	done

	#
	# Screen Inactivity Period
	#   o System Settings -> Brightness & Lock
	#
	echo 'How many minutes of inactivity before turning screen off?'
	select inactivePeriod in '1' '3' '5' '10' '15' '20' '30' '45' '60' 'Never'; do
		echo
		if [ "$inactivePeriod" == 'Never' ]; then
			printInfo "Setting 'Screen Inactive Period' to 'Never'"

			$EXEC_GSETTINGS set org.gnome.desktop.session idle-delay 0
		else
			printInfo "Setting 'Screen Inactive Period' to '$inactivePeriod minutes'"

			$EXEC_GSETTINGS set org.gnome.desktop.session idle-delay $[ 60 * $inactivePeriod ]

			echo
			echo 'Want to enable locking the screen when it turns off?'
			select lockScreen in 'Yes' 'No'; do
				echo
				if [ "$lockScreen" == 'Yes' ]; then
					printInfo 'Enabling screen locking'

					$EXEC_GSETTINGS set org.gnome.desktop.screensaver lock-enabled true
				elif [ "$lockScreen" == 'No' ]; then
					printInfo 'Disabling screen locking'

					$EXEC_GSETTINGS set org.gnome.desktop.screensaver lock-enabled false
				fi

				break;
			done
		fi

		echo
		break;
	done

	# Set Xft-dpi for unity-greeter
	if [ "$($EXEC_GSETTINGS get com.canonical.unity-greeter xft-dpi)" == '96.0' ]; then
		# Question
		echo -n "What DPI do you want to use for the Unity greeter (96.0)? "
		read dpi
		echo

		if [ ! -z "$dpi" ] && [ "$dpi" != '96.0' ]; then
			$EXEC_GSETTINGS set com.canonical.unity-greeter xft-dpi $dpi
		fi
	fi

	# Turn off Remote Content Search
	if [ "$($EXEC_GSETTINGS get com.canonical.Unity.Lenses remote-content-search)" != "'none'" ]; then
		printInfo 'Turning off Remote Content Search'

		$EXEC_GSETTINGS set com.canonical.Unity.Lenses remote-content-search 'none'
	fi
fi

#
# Window Controls Location
#
#echo 'Which side do you want the window controls on?'
#select windowControls in 'Right' 'Left'; do
#  break;
#done
#
#echo

# Window Controls Location
#if [ "$windowControls" == 'Right' ]; then
#  printInfo 'Placing the window controls on the right'
#
#  # minimize,maximize,close	printInfo 'Enabling workspaces'

#  $EXEC_DCONF write /org/gnome/desktop/wm/preferences/button-layout "':minimize,maximize,close'"
#
#else
#  printInfo 'Placing the window controls on the left'
#
#  # close,minimize,maximize
#  $EXEC_DCONF write /org/gnome/desktop/wm/preferences/button-layout "'close,minimize,maximize:'"
#
#fi

if [ "$echoOnExit" == 'true' ]; then
	echo
fi

exit 0

#!/bin/bash

#
# git-config.sh - DevOpsBroker utility for configuring Git repositories
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-45
#
# Manages the Git repository configuration for the following attributes:
#   o user.name - The name associated with Git commits
#   o user.email - The email address associated with Git commits
#
# Also can execute the following commands:
#   o list - Lists the current configuration of a Git repository
#   o test-ssh - Tests GitHub SSH connection
#
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
  source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;38;2;255;100;100mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
  source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"${bold}${bittersweet}Cannot load '/etc/devops/exec.conf': No such file${reset}"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
  source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"${bold}${bittersweet}Cannot load '/etc/devops/functions.conf': No such file${reset}"}

################################## Functions ##################################

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:	showHelp
# Description:	Displays help message to the user
# -----------------------------------------------------------------------------
function showHelp() {
  # BEGIN showHelp function

  printUsage "git-config ${gold}[COMMAND] [OPTION]..."

  echo ${bold}
  echo "Valid Commands:${romantic}"
  echo -e '  config\t\t'		'Configure the current Git repository'
  echo -e "    ${gold}-e EMAIL_ADDR\t"	"${romantic}The email address to use for a single Git repository"
  echo -e "    ${gold}-n FULL_NAME\t"	"${romantic}The name to use for a single Git repository"
  echo
  echo -e '  list\t\t\t'		'List all variables set in the config files along with their values'
  echo -e '  test-ssh\t\t'		'Tests GitHub SSH connection once SSH key is created and added to GitHub'
  echo ${reset}

  # END showHelp function
}

################################## Variables ##################################

## Bash exec variables
EXEC_GIT=/usr/bin/git
EXEC_SSH=/usr/bin/ssh

repoCommands=('config' 'list')
validCommands=(${repoCommands[@]} 'test-ssh')

## Options
command=${1:-'config'}
fullname=''
useremail=''

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display error if invalid command
if [ $(containsElement "$command" "${validCommands[@]}") != '0' ]; then
  printError 'git-config' "Invalid command: '$command'"
  echo

  showHelp

  exit 1
fi

# Display error if not within a Git repository
if [ $(containsElement "$command" "${repoCommands[@]}") == '0' ] && \
	[ "$($EXEC_GIT rev-parse --is-inside-work-tree 2>/dev/null)" != 'true' ]; then
  printError 'git-config' "Invalid Git repository: $PWD"
  echo
  showHelp

  exit 1
fi

if [ $command == 'config' ]; then

  # Process command-line options, if present
  while [[ "$2" =~ ^- ]]; do

    if [ "$2" == '-e' ]; then

      # Display error and usage if incorrect parameters given
      if [ -z "$3" ]; then
	printError 'git-config' 'Missing user email parameter'
	echo
	printUsage 'git-config -e EMAIL_ADDR'

	exit 1
      fi

      useremail="$3"
      shift 2

    elif [ "$2" == '-n' ]; then

      # Display error and usage if incorrect parameters given
      if [ -z "$3" ]; then
	printError 'git-config' 'Missing name parameter'
	echo
	printUsage 'git-config -n FULL_NAME'

	exit 1
      fi

      fullname="$3"
      shift 2

    else
      # Display usage and error if option parameter is not valid
      printError 'git-config' "Invalid option: $2"
      echo

      showHelp

      exit 1
    fi
  done
fi

################################### Actions ###################################

if [ $command == 'config' ]; then
  # BEGIN config command

  printBanner 'Configuring Git Repository'

  # Set fullname, if missing
  if [ -z "$fullname" ]; then
    fullname=$($EXEC_AWK -F ':' '/^'$USER'/{print $5}' /etc/passwd | $EXEC_SED 's/,//g')

    # Question 1
    echo -n "What name do you want to use for this Git repository ($fullname)? "
    read name
    echo

    if [ ! -z "$name" ]; then
      fullname="$name"
    fi
  fi

  # Question 2 --> Set useremail, if missing
  while [ -z "$useremail" ]; do
    echo -n 'What email address do you want to use for this Git repository? '
    read useremail
    echo
  done

  printInfo "Configuring Git repository user.name to $fullname"
  $EXEC_GIT config user.name "$fullname"

  printInfo "Configuring Git repository user.email to $useremail"
  $EXEC_GIT config user.email "$useremail"

  echo

  # END config command
elif [ $command == 'list' ]; then

  $EXEC_GIT config --list

elif [ $command == 'test-ssh' ]; then

  $EXEC_SSH -T github.com

fi

exit 0

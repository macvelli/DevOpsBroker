#!/bin/bash

#
# pms - DevOpsBroker Package Management System
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# Now that there are dpkg(1), APT(8), and snap(1) it is getting cumbersom to
# manage things even as simple as updating the system.
#
# This script is meant to change that.
#
# dpkg --ignore-depends=libtidy-0.99-0 -i tidy
#
# TODO: Need to implement find/search functionality https://packages.ubuntu.com/
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
	source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;91mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
	source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"[1;91mCannot load '/etc/devops/exec.conf': No such file[0m"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
	source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"[1;91mCannot load '/etc/devops/functions.conf': No such file[0m"}

################################## Functions ##################################

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     showHelp
# Description:  Displays help message to the user
# -----------------------------------------------------------------------------
function showHelp() {
	# BEGIN showHelp function

	if [ "$command" == 'autoremove' ]; then
		printUsage 'pms autoremove'
		echo ${romantic}
		echo 'Removes all packages that were automatically installed to satisfy dependencies for other packages and are now no longer needed'${reset}
	elif [ "$command" == 'full-upgrade' ]; then
		printUsage 'pms full-upgrade'
		echo ${romantic}
		echo 'Performs an upgrade and will remove currently installed packages if this is needed to upgrade the system as a whole'${reset}
	elif [ "$command" == 'info' ]; then
		printUsage 'pms info { package-name | snap-name }'
		echo ${romantic}
		echo 'Displays information about the given package/snap'${reset}
	elif [ "$command" == 'install' ]; then
		printUsage 'pms install { package-name | snap-name | file.deb }'
		echo ${romantic}
		echo 'Installs the specified packages/snaps/.deb files'${reset}
	elif [ "$command" == 'list' ]; then
		printUsage "pms list ${gold}{ package-name | snap-name | file.deb }"
		echo
		echo ${bold}${white}'Valid Options:'${reset}
		echo -e ${bold}${yellow}'  [none]\t'        ${romantic}'Lists all installed packages and snaps on the system'
		echo -e ${bold}${yellow}'  package-name\t'  ${romantic}'Lists all files that are included within the package'
		echo -e ${bold}${yellow}'  snap-name\t'     ${romantic}'Lists all files that are included within the snap'
		echo -e ${bold}${yellow}'  file.deb\t'      ${romantic}'Lists all files that are packaged within the .deb file'
		echo ${reset}
	elif [ "$command" == 'reconfigure' ]; then
		printUsage 'pms reconfigure package-name'
		echo ${romantic}
		echo 'Reconfigures an already installed package'${reset}
	elif [ "$command" == 'refresh' ]; then
		printUsage "pms refresh ${gold}snap-name"
		echo ${romantic}
		echo 'Refresh a snap in the system'${reset}
		echo
		echo ${bold}${white}'Valid Options:'${reset}
		echo -e ${bold}${yellow}'  [none]\t'        ${romantic}'Refresh all snaps in the system'
		echo -e ${bold}${yellow}'  snap-name\t'     ${romantic}'Refresh the specified snap'
		echo ${reset}
	elif [ "$command" == 'reinstall' ]; then
		printUsage 'pms reinstall package-name'
		echo ${romantic}
		echo 'Re-install packages that are already installed and at the newest version'${reset}
	elif [ "$command" == 'remove' ]; then
		printUsage 'pms remove { package-name | snap-name }'
		echo ${romantic}
		echo 'Removes an installed package or snap from the system'${reset}
	elif [ "$command" == 'uninstall' ]; then
		printUsage 'pms uninstall package-name'
		echo ${romantic}
		echo 'Removes everything related to an installed or already removed package including configuration files'${reset}
	elif [ "$command" == 'upgrade' ]; then
		printUsage 'pms upgrade'
		echo ${romantic}
		echo 'Installs available upgrades of all packages currently installed on the system'${reset}
	elif [ "$command" == 'which' ]; then
		printUsage 'pms which FILE'
		echo ${romantic}
		echo 'Displays which package the given file belongs to'${reset}
	fi

	# END showHelp function
}

################################## Variables ##################################

## Bash exec variables
EXEC_APT_CACHE=/usr/bin/apt-cache
EXEC_APT_GET=/usr/bin/apt-get
EXEC_APT_MARK=/usr/bin/apt-mark
EXEC_BETWEEN=/usr/local/bin/between
EXEC_DPKG=/usr/bin/dpkg
EXEC_DPKG_QUERY=/usr/bin/dpkg-query
EXEC_DPKG_RECONFIG=/usr/sbin/dpkg-reconfigure
EXEC_LSB_RELEASE=/usr/bin/lsb_release
EXEC_WHICH=/usr/bin/which

## Options
command="$1"

## Variables
showCommandHelp=false
sudoCommands=('autoremove' 'full-upgrade' 'install' 'reconfigure' 'refresh' 'reinstall' 'remove' 'uninstall' 'upgrade')
validCommands=(${sudoCommands[@]} 'info' 'list' 'which')

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~ COMMAND/OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~

if [ "$command" == 'help' ]; then
	showCommandHelp=true
	command="$2"
	shift
fi

# Display usage if no parameters given
if [ -z "$command" ]; then
	printUsage "pms ${gold}[help]${yellow} { autoremove | full-upgrade | info | install | list | reconfigure | refresh | reinstall | remove | uninstall | upgrade | which }"
	exit 1
fi

# Display error if invalid command
if [ $(containsElement "$command" "${validCommands[@]}") != '0' ]; then
	printError 'pms' "Invalid command: '$command'"
	echo
	printUsage "pms ${gold}[help]${yellow} { autoremove | full-upgrade | info | install | list | reconfigure | refresh | reinstall | remove | uninstall | upgrade | which }"

	exit 1
fi

if [ "$showCommandHelp" == 'true' ]; then
	showHelp
	exit 0
fi

# Display error if not running as root
if [ $(containsElement "$command" "${sudoCommands[@]}") == '0' ] && [ "$USER" != 'root' ]; then
	printError 'pms' 'Permission denied (you must be root)'
	exit 1
fi

################################### Actions ###################################

if [ $command == 'autoremove' ]; then

	$EXEC_APT autoremove

elif [ $command == 'upgrade' ] || [ $command == 'full-upgrade' ]; then

	# Update apt packages
	$EXEC_APT update
	echo
	$EXEC_APT list --upgradeable
	echo
	$EXEC_APT -y $command
	echo

	# Update the last-update file to today
	echo $($EXEC_DATE -I) > /etc/devops/last-update

elif [ $command == 'info' ]; then

	# Display usage if no package/snap name parameter given
	if [ -z "$2" ]; then
		printUsage 'pms info { package-name | snap-name }'
		exit 1
	fi

	name="$2"

	# Check for Snap information first
	snapInfo="$($EXEC_SNAP info $name 2>/dev/null)"

	if [ ! -z "$snapInfo" ]; then
		printBanner 'Snap Information'
		echo "${gold}$snapInfo"
	fi

	# Check for APT package information next
	aptPackageInfo="$($EXEC_APT show $name 2>/dev/null)"

	if [ ! -z "$aptPackageInfo" ]; then
		dpkgPackageInfo="$($EXEC_DPKG_QUERY -l $name 2>/dev/null)"

		printBanner 'Package Information'

		if [ ! -z "$dpkgPackageInfo" ];then
			echo "${green}$dpkgPackageInfo${newline}"
		fi

		echo "${blue}$aptPackageInfo${newline}"
	fi

elif [ $command == 'install' ]; then

	# Display usage if no package/snap name parameter given
	if [ -z "$2" ]; then
		printUsage 'pms install { package-name | snap-name | file.deb }'
		exit 1
	fi

	# Gather all package names from the command-line
	shift
	debList=()
	packageList=()
	snapList=()

	for name in "$@"; do
		if [[ "$name" =~ \.deb$ ]]; then

			fileName="$name"

			# Assume the .deb file is in the current directory
			if [[ ! "$fileName" =~ / ]]; then
				fileName="${PWD}/${fileName}"

				if [ ! -f "$fileName" ]; then
					printError 'pms' "Cannot find '$name': No such file"
					continue
				fi
			fi

			debList+=( "$fileName" )

		else
			# Check the Apt cache first for the package
			mapfile -t pkgInfo < <($EXEC_APT_CACHE policy $name 2>/dev/null)

			if [ ! -z "$pkgInfo" ]; then
				if [[ ! "${pkgInfo[1]}" =~ 'Installed: (none)'$ ]]; then
					printInfo "Package '$name' already installed"
					continue
				else
					pkgInfo=( ${pkgInfo[2]} )
				fi
			fi

			# Check Snap next
			mapfile -t snapInfo < <($EXEC_SNAP list $name 2>/dev/null)

			if [ ! -z "$snapInfo" ]; then
				printInfo "Snap '$name' already installed"
				continue
			else
				printInfo "Searching for Snap '$name'"
				snapInfo=($($EXEC_SNAP find $name 2>/dev/null | $EXEC_GREP -E ^$name\\b))
			fi

			# Take care of all possible situations
			if [ -z "$pkgInfo" ] && [ -z "$snapInfo" ]; then

				printError 'pms' "Cannot find '$name': No such package/snap"
				continue

			elif [ ! -z "$pkgInfo" ] && [ -z "$snapInfo" ]; then

				packageList+=( "$name" )

			elif [ -z "$pkgInfo" ] && [ ! -z "$snapInfo" ]; then

				snapList+=( "$name" )

			elif [ ! -z "$pkgInfo" ] && [ ! -z "$snapInfo" ]; then
				echo ${bold}
				echo $name="$2"{purple}"Which $name version do you want to install?"${white}
				select version in "${pkgInfo[1]} (APT)" "${snapInfo[1]} (Snap)"; do
					echo
					if [[ "$version" =~ '(APT)'$ ]]; then
						packageList+=( "$name" )
					else
						snapList+=( "$name" )
					fi
					break;
				done
			fi
		fi
	done

	# Install .deb packages
	for debFile in "${debList[@]}"; do
		printBanner "Installing $debFile"
		$EXEC_APT -y install $debFile
		echo
	done

	# Install APT packages
	for aptPackage in "${packageList[@]}"; do
		printBanner "Installing $aptPackage"
		$EXEC_APT -y install $aptPackage
		echo
	done

	# Install Snaps
	for snap in "${snapList[@]}"; do
		printBanner "Installing $snap"
		$EXEC_SNAP install $snap
		echo
	done

elif [ $command == 'list' ]; then

	# List all installed packages if no package name given
	if [ -z "$2" ]; then

		printBanner 'Installed APT packages'
		$EXEC_APT list --installed
		echo
		printBanner 'Installed Snaps'
		$EXEC_SNAP list

	else

		name="$2"

		if [[ "$name" =~ \.deb$ ]]; then
			if [ ! -f "$name" ]; then
				printError 'pms' "Cannot find '$name': No such .deb file"
				echo
				printUsage 'pms list file.deb'

				exit 1
			fi

			$EXEC_DPKG --contents "$name"

		else
			# Check for an installed snap first
			if [ -L "/snap/$name/current" ]; then
				$EXEC_FIND -L "/snap/$name/current" -type f
			else
				# Check the Apt cache first for the package
				mapfile -t pkgInfo < <($EXEC_APT_CACHE policy $name 2>/dev/null)

				if [ ! -z "$pkgInfo" ]; then
					echo "${pkgInfo[1]:2}"

					if [[ ! "${pkgInfo[1]}" =~ 'Installed: (none)'$ ]]; then
						$EXEC_DPKG -L "$name"
					else
						$EXEC_CURL -s --no-buffer https://packages.ubuntu.com/$($EXEC_LSB_RELEASE -sc)/amd64/$name/filelist | $EXEC_BETWEEN "<pre>" "</pre>"
					fi
				fi
			fi
		fi
	fi

elif [ $command == 'reconfigure' ]; then

	if [ -z "$2" ]; then
		printUsage 'pms reconfigure package-name'
		exit 1
	fi

	$EXEC_DPKG_RECONFIG "$2"

elif [ $command == 'refresh' ]; then

	# Update all snap applications
	if [ -z "$2" ]; then
		$EXEC_SNAP refresh
	else
		# Gather all snap names from the command-line
		shift
		snapNames="$@"

		$EXEC_SNAP refresh "$snapNames"
	fi

elif [ $command == 'reinstall' ]; then

	if [ -z "$2" ]; then
		printUsage 'pms reinstall package-name'
		exit 1
	fi

	$EXEC_APT_GET install --reinstall "$2"

elif [ $command == 'remove' ]; then

	if [ -z "$2" ]; then
		printUsage 'pms remove { package-name | snap-name }'
		exit 1
	fi

	name="$2"

	# Check to see if the package is installed
	dpkgPackageInfo="$($EXEC_DPKG_QUERY -l $name 2>/dev/null)"

	if [ ! -z "$dpkgPackageInfo" ]; then
		$EXEC_DPKG --remove "$name"
	else
		snapInfo="$($EXEC_SNAP list $name 2>/dev/null)"

		# Check for an installed Snap
		if [ ! -z "$snapInfo" ]; then
			$EXEC_SNAP remove "$name"
		fi
	fi

elif [ $command == 'uninstall' ]; then

	if [ -z "$2" ]; then
		printUsage 'pms uninstall package-name'
		exit 1
	fi

	# Gather all package names from the command-line
	shift
	packageNames="$@"

	# Uninstall packages
	printBanner "Uninstalling $packageNames"
	$EXEC_APT -y purge $packageNames

elif [ $command == 'which' ]; then

	if [ -z "$2" ]; then
		printUsage 'pms which FILE'
		exit 1
	fi

	# Set filename variable
	filename="$2"

	# Attempt to find filename
	if [ ! -f "$filename" ]; then
		filename=$($EXEC_WHICH "$filename")
	fi

	# Display error if file does not exist
	if [ ! -f "$filename" ]; then
		printError 'pms' "Cannot access '$filename': No such file"
		echo
		printUsage 'pms which FILE'

		exit 1
	fi

	echo -n 'Package Name: '
	$EXEC_DPKG_QUERY -S "$filename" | $EXEC_AWK -F ":" '{ print $1 }'

fi

exit 0

#!/bin/bash

#
# firewall - DevOpsBroker administrative tool for managing iptables/ip6tables
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# The philosophy behind this script is to allow the user easy access to all
# relevant information regarding firewall settings on his or her machine.
#
# The options provided allow the user to sharpen the focus of their work while
# utilizing this script.
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
	source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;91mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
	source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"[1;91mCannot load '/etc/devops/exec.conf': No such file[0m"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
	source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"[1;91mCannot load '/etc/devops/functions.conf': No such file[0m"}

SCRIPT_DIR=$( $EXEC_DIRNAME "$BASH_SOURCE" )

################################## Functions ##################################

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     showHelp
# Description:  Displays help message to the user
# -----------------------------------------------------------------------------
function showHelp() {
	# BEGIN showHelp function

	if [ "$command" == 'enable' ]; then
		printUsage 'firewall enable SERVICE_NAME'
		echo ${romantic}
		echo 'Enables the indicated service for the firewall'${reset}
	elif [ "$command" == 'list' ]; then
		printUsage "firewall list ${gold}[-4|-6] [raw|mangle|nat|filter] [CHAIN_NAME]"
		echo ${romantic}
		echo 'List active iptables/ip6tables firewall rules'${reset}
		echo
		echo ${bold}${white}'Valid Options:'${reset}
		echo -e ${bold}${yellow}'  -4\t\t'    ${romantic}'View IPv4 Firewall configuration'
		echo -e ${bold}${yellow}'  -6\t\t'    ${romantic}'View IPv6 Firewall configuration'
		echo -e ${bold}${yellow}'  raw\t\t'   ${romantic}'Limit output to the RAW table'
		echo -e ${bold}${yellow}'  mangle\t'  ${romantic}'Limit output to the MANGLE table'
		echo -e ${bold}${yellow}'  nat\t\t'   ${romantic}'Limit output to the NAT table'
		echo -e ${bold}${yellow}'  filter\t'  ${romantic}'Limit output to the FILTER table'
		echo ${reset}
	elif [ "$command" == 'log' ]; then
		printUsage 'firewall log'
		echo ${romantic}
		echo 'Display summary of packets blocked by the firewall'${reset}
	fi

	# END showHelp function
}

################################## Variables ##################################

## Bash exec variables
EXEC_DMESG=/bin/dmesg
EXEC_FIRELOG=/usr/local/bin/firelog

IPTABLES=/sbin/iptables
IP6TABLES=/sbin/ip6tables

## Options
command="$1"
ipv4=true
ipv6=true
table=''
chain=''

## Variables
showCommandHelp=false
sudoCommands=('enable' 'list')
validCommands=(${sudoCommands[@]} 'log')

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if [ "$command" == 'help' ]; then
	showCommandHelp=true
	command="$2"
	shift
fi

# Display usage if no parameters given
if [ -z "$command" ]; then
	printUsage 'firewall { enable | list | log }'
	exit 1
fi

# Display error if invalid command
if [ $(containsElement "$command" "${validCommands[@]}") != '0' ]; then
	printError 'firewall' "Invalid command: '$command'"
	echo
	printUsage 'firewall { enable | list | log }'

	exit 1
fi

if [ "$showCommandHelp" == 'true' ]; then
	showHelp
	exit 0
fi

# Display error if not running as root
if [ $(containsElement "$command" "${sudoCommands[@]}") == '0' ] && [ "$USER" != 'root' ]; then
	printError 'firewall' 'Permission denied (you must be root)'
	exit 1
fi

if [ "$command" == 'enable' ]; then

	serviceName="$2"

	if [ -z "$serviceName" ]; then
		printError 'firewall' "Missing SERVICE_NAME parameter"
		echo
		printUsage 'firewall enable SERVICE_NAME'

		exit 1
	elif [ ! -f "$SCRIPT_DIR/services/$serviceName" ]; then
		printError 'firewall' "Invalid or unsupported service: '$serviceName'"
		echo
		printUsage 'firewall enable SERVICE_NAME'

		exit 1
	fi

else
	# Process command-line options
	while [[ "$2" == -* ]]; do

		if [ "$2" == '-4' ]; then
			ipv4=true
			ipv6=false
		elif [ "$2" == '-6' ]; then
			ipv4=false
			ipv6=true
		else
			# Display error and help if option parameter is not valid
			printError 'firewall' "Invalid option: '$2'"
			echo
			showHelp

			exit 1
		fi

		shift

	done
fi

################################### Actions ###################################

if [ $command == 'enable' ]; then

	"$SCRIPT_DIR/services/$serviceName" enable

elif [ $command == 'list' ]; then
	# BEGIN list Command

	# Process table/chain parameters
	if [ ! -z "$2" ]; then
		table="${2,,}"

		# Display usage and error if table parameter is not valid
		if [[ ! "$table" =~ ^raw|mangle|nat|filter$ ]]; then
			printError 'firewall' "Cannot access '$table': No such iptables table"
			echo
			showHelp

			exit 1
		fi

		if [ ! -z "$3" ]; then
			chain="$3"
		fi
	fi

	if [ "$ipv4" == 'true' ]; then
		# BEGIN iptables list

		printBox 'iptables firewall rules'

		if [ -z $table ] || [ $table == 'raw' ]; then
			printBanner 'iptables RAW table'
			$IPTABLES -t raw --line-numbers -n -v -L $chain
			echo
		fi

		if [ -z $table ] || [ $table == 'mangle' ]; then
			printBanner 'iptables MANGLE table'
			$IPTABLES -t mangle --line-numbers -n -v -L $chain
			echo
		fi

		if [ -z $table ] || [ $table == 'nat' ]; then
			printBanner 'iptables NAT table'
			$IPTABLES -t nat --line-numbers -n -v -L $chain
			echo
		fi

		if [ -z $table ] || [ $table == 'filter' ]; then
			printBanner 'iptables FILTER table'
			$IPTABLES -t filter --line-numbers -n -v -L $chain
			echo
		fi

		# END iptables list
	fi

	if [ "$ipv6" == 'true' ]; then
		# BEGIN ip6tables list

		printBox 'ip6tables firewall rules'

		if [ -z $table ] || [ $table == 'raw' ]; then
			printBanner 'ip6tables RAW table'
			$IP6TABLES -t raw --line-numbers -n -v -L $chain
			echo
		fi

		if [ -z $table ] || [ $table == 'mangle' ]; then
			printBanner 'ip6tables MANGLE table'
			$IP6TABLES -t mangle --line-numbers -n -v -L $chain
			echo
		fi

		if [ -z $table ] || [ $table == 'nat' ]; then
			printBanner 'ip6tables NAT table'
			$IP6TABLES -t nat --line-numbers -n -v -L $chain
			echo
		fi

		if [ -z $table ] || [ $table == 'filter' ]; then
			printBanner 'ip6tables FILTER table'
			$IP6TABLES -t filter --line-numbers -n -v -L $chain
			echo
		fi

		# END ip6tables list
	fi

	# END list Command
elif [ $command == 'log' ]; then

	$EXEC_DMESG -t | $EXEC_FIRELOG

fi

exit 0
